"use strict";
    class Producto { constructor(id, codigo, nombre, marcaId = null, desc = '', cat = '', med = '', prec = 0, cost = 0, fob = 0, stock = 0, sId = '', imgs = [], precioMayor = 0, aplicaciones = []) { this.id = id; this.codigo = codigo; this.nombre = nombre; this.marcaId = marcaId; this.descripcion = desc; this.categoria = cat; this.medida = med; this.precio = parseFloat(prec) || 0; this.costo = parseFloat(cost) || 0; this.fob = parseFloat(fob) || 0; this.stock = parseInt(stock) || 0; this.seriesId = sId; this.imagenes = Array.isArray(imgs) && imgs.length > 0 ? imgs.map(img => img || DEFAULT_IMAGE_SVG).filter(img => typeof img === 'string') : [DEFAULT_IMAGE_SVG]; if (this.imagenes.length > MAX_IMAGES) this.imagenes = this.imagenes.slice(0, MAX_IMAGES); if (this.imagenes.length === 0) this.imagenes = [DEFAULT_IMAGE_SVG]; this.precioMayor = parseFloat(precioMayor) || 0; this.aplicaciones = Array.isArray(aplicaciones) ? aplicaciones : []; } }
    class Serie{constructor(id,codigo,nombre,color){this.id=id;this.codigo=codigo;this.nombre=nombre;this.color=color;}}
    class Categoria{constructor(id,nombre){this.id=id;this.nombre=nombre;}}
    class Marca{constructor(id,nombre){this.id=id;this.nombre=nombre;}}
    class JuegoProducto { constructor(id, codigo, nombre, aplicaciones = [], componentes = []) { this.id = id; this.codigo = codigo; this.nombre = nombre; this.aplicaciones = Array.isArray(aplicaciones) ? aplicaciones : []; this.componentes = Array.isArray(componentes) ? componentes.map(c => ({ productoId: parseInt(c.productoId), cantidad: parseInt(c.cantidad) || 1 })).filter(c => !isNaN(c.productoId) && c.productoId > 0 && c.cantidad > 0) : []; } }

    class SistemaRepuestos{
        constructor(){
            this.productos=[]; this.series=[]; this.categorias=[]; this.marcas=[]; this.juegos = [];
            this.nextProductId=1; this.nextSeriesId=1; this.nextCategoryId=1; this.nextMarcaId=1; this.nextJuegoId = 1;
            this.currentEditProductId=null; this.currentEditSeriesId=null; this.currentEditCategoryId=null; this.currentEditMarcaId=null; this.currentEditJuegoId = null;
            this.currentFilter=''; this.debounceTimer=null; this.priceTableFilter=''; this.priceTableDebounceTimer=null;
            this._zoomedImages = []; this._currentZoomIndex = 0;
            this.loadFromLocalStorage();
            this.inicializarEventos();
            this.renderAll();
        }

        loadFromLocalStorage(){
             const load=(k,d)=>{try{const i=localStorage.getItem(`repuestos_${k}`);return i?JSON.parse(i):d;}catch(e){console.error(`Err parse repuestos_${k}`,e);localStorage.removeItem(`repuestos_${k}`);return d;}};
             this.series=load('series',this.getDefaultSeries()).map(s=>new Serie(s.id,s.codigo,s.nombre,s.color));
             this.categorias=load('categorias',this.getDefaultCategories()).map(c=>new Categoria(c.id,c.nombre));
             this.marcas=load('marcas',this.getDefaultMarcas()).map(m=>new Marca(m.id,m.nombre));
             const prodsSaved=load('productos',null);
             this.productos=(prodsSaved===null?this.getDefaultProducts():prodsSaved).map(p=>{
                let mId=null;
                if(typeof p.marcaId==='number')mId=p.marcaId;
                else if(typeof p.marca==='string'&&p.marca){const f=this.marcas.find(m=>m.nombre.toLowerCase()===p.marca.toLowerCase());if(f)mId=f.id;}
                else if(typeof p.marca==='number')mId=p.marca;
                let imgs=[DEFAULT_IMAGE_SVG];
                if(p.imagenes&&Array.isArray(p.imagenes)&&p.imagenes.length>0)imgs=p.imagenes.map(i=>i||DEFAULT_IMAGE_SVG);
                else if(p.imagen&&typeof p.imagen==='string')imgs=[p.imagen===""?DEFAULT_IMAGE_SVG:p.imagen];
                if(imgs.length===0)imgs=[DEFAULT_IMAGE_SVG];
                const aplicacionesLegado = p.aplicaciones && Array.isArray(p.aplicaciones) ? p.aplicaciones : [];
                return new Producto(p.id, p.codigo, p.nombre, mId, p.descripcion, p.categoria, p.medida, p.precio, p.costo, p.fob, p.stock, p.seriesId, imgs, p.precioMayor, aplicacionesLegado);
             });
             this.juegos = load('juegos', this.getDefaultJuegos()).map(j => {
                const componentes = (j.componentes || j.productoIds || []).map(item => {
                    if (typeof item === 'number') { return { productoId: item, cantidad: 1 }; }
                    return { productoId: parseInt(item.productoId), cantidad: parseInt(item.cantidad) || 1 };
                }).filter(c => !isNaN(c.productoId) && c.productoId > 0 && c.cantidad > 0);
                return new JuegoProducto(j.id, j.codigo, j.nombre, j.aplicaciones, componentes);
             });
             this.recalculateNextIds();
             this.fixDefaultDataIds();
        }

        saveToLocalStorage(){
            try{
                const dataToSave = {
                    series: this.series,
                    categorias: this.categorias,
                    marcas: this.marcas,
                    productos: this.productos,
                    juegos: this.juegos
                };
                let totalSize = 0;
                for (const key in dataToSave) {
                    const itemKey = `repuestos_${key}`;
                    const dataString = JSON.stringify(dataToSave[key]);
                    totalSize += dataString.length;
                    localStorage.setItem(itemKey, dataString);
                }
                if(totalSize > 4 * 1024 * 1024) console.warn("WARN Repuestos: Datos > 4MB.");
            } catch(e){
                const errorMsg = "Ocurrió un error inesperado al intentar guardar los datos de repuestos.";
                const title = "Error Inesperado";
                if(e.name === 'QuotaExceededError' || (e.code && (e.code === 22 || e.code === 1014))) {
                     Swal.fire({title:"Error de Almacenamiento", text:"¡Límite de almacenamiento local excedido! No se pudieron guardar los cambios de repuestos.", icon:"error"});
                } else {
                     Swal.fire({title: title, text: errorMsg, icon:"error"});
                }
                console.error("Err save LS Repuestos:", e);
            }
        }

        recalculateNextIds(){
            this.nextProductId=this.productos.length>0?Math.max(1,...this.productos.map(p=>p.id||0))+1:1;
            this.nextSeriesId=this.series.length>0?Math.max(1,...this.series.map(s=>s.id||0))+1:1;
            this.nextCategoryId=this.categorias.length>0?Math.max(1,...this.categorias.map(c=>c.id||0))+1:1;
            this.nextMarcaId=this.marcas.length>0?Math.max(1,...this.marcas.map(m=>m.id||0))+1:1;
            this.nextJuegoId = this.juegos.length > 0 ? Math.max(1, ...this.juegos.map(j => j.id || 0)) + 1 : 1;
            const lS=this.getDefaultSeries().length>0?Math.max(...this.getDefaultSeries().map(s=>s.id)):0;
            const lC=this.getDefaultCategories().length>0?Math.max(...this.getDefaultCategories().map(c=>c.id)):0;
            const lM=this.getDefaultMarcas().length>0?Math.max(...this.getDefaultMarcas().map(m=>m.id)):0;
            const lJ = this.getDefaultJuegos().length > 0 ? Math.max(...this.getDefaultJuegos().map(j => j.id)) : 0;
            if(this.nextSeriesId<=lS)this.nextSeriesId=lS+1;
            if(this.nextCategoryId<=lC)this.nextCategoryId=lC+1;
            if(this.nextMarcaId<=lM)this.nextMarcaId=lM+1;
            if (this.nextJuegoId <= lJ) this.nextJuegoId = lJ + 1;
        }

        getDefaultSeries(){return[new Serie(1,'anillo','Anillo Sincronizador','#ffc107'),new Serie(2,'cadenas','cadenas','#ffc107'),new Serie(3,'canastillas','Canastillas','#ffc107'),new Serie(4,'ejes','Ejes y Deslizantes','#ffc107'),new Serie(5,'propulsor','Propulsor','#ffc107'),new Serie(6,'rodamientos','Rodamientos y Retenes','#ffc107')];}
        getDefaultCategories(){return[new Categoria(1,'caja de cambios'),new Categoria(2,'corona'),new Categoria(3,'direccion'),new Categoria(4,'electrico'),new Categoria(5,'frenos'),new Categoria(6,'motor'),new Categoria(7,'suspension'),new Categoria(8,'transmision')];}
        getDefaultMarcas(){return[new Marca(1,'JBR'),new Marca(2,'Chevrolet'),new Marca(3,'Daewoo'),new Marca(4,'Toyota'),new Marca(5,'Nissan'),new Marca(6,'Kia'),new Marca(7,'Hyundai')];}
        getDefaultProducts(){return[new Producto(1,'DEF-001','Ejemplo 1',4,'Desc 1','motor','Std',100,70,20,10,'rodamientos',[],90, [{vehiculo: 'Hilux 2010', marca: 'Toyota', codigoJuego: 'EX-1', nombreJuego: 'Test Kit'}]),new Producto(2,'DEF-002','Ejemplo 2',1,'Desc 2','frenos','10mm',50,30,10,25,'anillo',[],45),new Producto(3,'ABC-123','Ejemplo 3',2,'Desc 3','caja de cambios','N/A',19.99,12,3,5,'cadenas',[],18.50)];}
        getDefaultJuegos() { return []; }

        fixDefaultDataIds(){ const f=(t,g)=>{const i=this[t],d=g.call(this),p=t==='series'||t==='juegos'?'codigo':'nombre';d.forEach(df=>{let ex=i.find(it=>it[p]===df[p])||i.find(it=>it.id===df.id);if(!ex)i.push(df);else{if(ex.id!==df.id)ex.id=df.id;if(t==='series'&&!ex.color)ex.color=df.color;if(!ex.nombre)ex.nombre=df.nombre;if(t==='series'&&!ex.codigo)ex.codigo=df.codigo;}});const ids=new Set(),u=[];i.forEach(it=>{if(!ids.has(it.id)){ids.add(it.id);u.push(it);}else console.warn(`Dupe ID ${it.id} for ${t}`);});this[t]=u.sort((a,b)=>a.id-b.id);}; f('series',this.getDefaultSeries);f('categorias',this.getDefaultCategories);f('marcas',this.getDefaultMarcas); f('juegos', this.getDefaultJuegos); this.recalculateNextIds(); }

        renderAll(){requestAnimationFrame(()=>{this._renderManagementTables();this.populateCategorySelect();this.populateSeriesSelect();this.populateMarcaSelect(); this.renderProductGridAndTable();this.renderPriceTableOnly(); this.renderJuegosTable();});}
        _renderManagementTables(){this.renderSeriesTable();this.renderCategoryTable();this.renderMarcasTable();}
        renderProductGridAndTable(){ const t=this.currentFilter,p=this._getFilteredProducts(t),g=document.getElementById('productGrid'); if(!g)return; g.innerHTML=''; this._handleEmptyState(p.length,this.productos.length,t,'productGridEmptyState',null,null,0,'📦','Producto',this.showProductModal); const f=document.createDocumentFragment(); p.sort((a,b)=>a.nombre.localeCompare(b.nombre)).forEach(pr=>{try{this._createProductElements(pr,f,null);}catch(e){console.error("Err grid:",pr?.id,e);}}); g.appendChild(f); }
        renderPriceTableOnly(){ const t=this.priceTableFilter,p=this._getFilteredProducts(t),b=document.getElementById('priceTableBody'); if(!b)return; b.innerHTML=''; this._handleEmptyState(p.length,this.productos.length,t,null,'priceTableEmptyStateWrapper','priceTableEmptyState',11,'📦','Producto',this.showProductModal); const f=document.createDocumentFragment(); p.sort((a,b)=>a.nombre.localeCompare(b.nombre)).forEach(pr=>{try{this._createProductElements(pr,null,f);}catch(e){console.error("Err table:",pr?.id,e);}}); b.appendChild(f); }
        renderSeriesTable(){const t=document.getElementById('seriesTableBody');if(!t)return;t.innerHTML='';this._handleEmptyState(this.series.length,this.series.length,'',null,'seriesTableEmptyStateWrapper','seriesTableEmptyState',5,'🏷️','Serie',this.showSeriesModal);const f=document.createDocumentFragment();this.series.sort((a,b)=>a.nombre.localeCompare(b.nombre)).forEach(s=>{const r=document.createElement('tr');r.dataset.id=s.id;r.innerHTML=`<td>${s.id}</td><td><code>${s.codigo}</code></td><td>${s.nombre}</td><td><span class="color-swatch" style="background-color:${s.color};"></span> ${s.color}</td><td><button type="button" class="btn-warning edit-btn action-button" data-action="edit" data-id="${s.id}"><i class="fas fa-edit"></i></button> <button type="button" class="btn-danger delete-btn action-button" data-action="delete" data-id="${s.id}"><i class="fas fa-trash"></i></button></td>`;f.appendChild(r);});t.appendChild(f);}
        renderCategoryTable(){const t=document.getElementById('categoryTableBody');if(!t)return;t.innerHTML='';this._handleEmptyState(this.categorias.length,this.categorias.length,'',null,'categoryTableEmptyStateWrapper','categoryTableEmptyState',3,'📁','Categoría',this.showCategoryModal);const f=document.createDocumentFragment();this.categorias.sort((a,b)=>a.nombre.localeCompare(b.nombre)).forEach(c=>{const r=document.createElement('tr');r.dataset.id=c.id;r.innerHTML=`<td>${c.id}</td><td>${c.nombre}</td><td><button type="button" class="btn-warning edit-btn action-button" data-action="edit" data-id="${c.id}"><i class="fas fa-edit"></i></button> <button type="button" class="btn-danger delete-btn action-button" data-action="delete" data-id="${c.id}"><i class="fas fa-trash"></i></button></td>`;f.appendChild(r);});t.appendChild(f);}
        renderMarcasTable(){const t=document.getElementById('marcaTableBody');if(!t)return;t.innerHTML='';this._handleEmptyState(this.marcas.length,this.marcas.length,'',null,'marcaTableEmptyStateWrapper','marcaTableEmptyState',3,'©️','Marca',this.showMarcaModal);const f=document.createDocumentFragment();this.marcas.sort((a,b)=>a.nombre.localeCompare(b.nombre)).forEach(m=>{const r=document.createElement('tr');r.dataset.id=m.id;r.innerHTML=`<td>${m.id}</td><td>${m.nombre}</td><td><button type="button" class="btn-warning edit-btn action-button" data-action="edit" data-id="${m.id}"><i class="fas fa-edit"></i></button> <button type="button" class="btn-danger delete-btn action-button" data-action="delete" data-id="${m.id}"><i class="fas fa-trash"></i></button></td>`;f.appendChild(r);});t.appendChild(f);}
        renderJuegosTable() { const tableBody = document.getElementById('juegosTableBody'); if (!tableBody) return; tableBody.innerHTML = ''; this._handleEmptyState(this.juegos.length, this.juegos.length, '', null, 'juegosTableEmptyStateWrapper', 'juegosTableEmptyState', 5, '🧊', 'Juego', this.showJuegoModal); const fragment = document.createDocumentFragment(); this.juegos.sort((a, b) => a.nombre.localeCompare(b.nombre)).forEach(juego => { const row = document.createElement('tr'); row.dataset.id = juego.id; row.innerHTML = `<td><code>${juego.codigo}</code></td><td>${juego.nombre}</td><td style="text-align:center;">${juego.aplicaciones.length}</td><td style="text-align:center;">${juego.componentes.length}</td><td><button type="button" class="btn-info btn-sm clone-btn action-button" data-action="clone" data-id="${juego.id}" title="Clonar Juego"><i class="fas fa-copy"></i></button> <button type="button" class="btn-warning edit-btn action-button" data-action="edit" data-id="${juego.id}"><i class="fas fa-edit"></i></button> <button type="button" class="btn-danger delete-btn action-button" data-action="delete" data-id="${juego.id}"><i class="fas fa-trash"></i></button></td>`; fragment.appendChild(row); }); tableBody.appendChild(fragment); }
        _getFilteredProducts(t){ let filteredProds = [...this.productos]; if(t) { const l=t.toLowerCase(); filteredProds = this.productos.filter(p=> (p.codigo?.toLowerCase().includes(l)) || (p.nombre?.toLowerCase().includes(l)) || (this.getMarcaById(p.marcaId)?.nombre.toLowerCase().includes(l)) || (this.getCategoryByName(p.categoria)?.nombre.toLowerCase().includes(l)) || (p.descripcion?.toLowerCase().includes(l)) || (this.getSerieByCode(p.seriesId)?.nombre.toLowerCase().includes(l)) || (p.medida?.toLowerCase().includes(l)) ); } const filtroJuego = document.getElementById('filtroPertenenciaJuego')?.value || 'todos'; if (filtroJuego === 'en_juego') { filteredProds = filteredProds.filter(p => this.juegos.some(j => j.componentes.some(c => c.productoId === p.id))); } else if (filtroJuego === 'no_en_juego') { filteredProds = filteredProds.filter(p => !this.juegos.some(j => j.componentes.some(c => c.productoId === p.id))); } return filteredProds; }
        _createProductElements(p,gF,tF){ const s=this.getSerieByCode(p.seriesId),sN=s?.nombre||'S/S',sC=s?.color||'#bdc3c7'; const mO=this.getMarcaById(p.marcaId),mN=mO?.nombre||'-'; const img=(p.imagenes&&p.imagenes.length>0&&p.imagenes[0]!==DEFAULT_IMAGE_SVG)?p.imagenes[0]:DEFAULT_IMAGE_SVG; const esParteDeJuego = this.juegos.some(juego => juego.componentes.some(comp => comp.productoId === p.id)); let indicadorJuegoHtml = ''; if (esParteDeJuego) { const nombresJuegos = this.juegos.filter(juego => juego.componentes.some(comp => comp.productoId === p.id)).map(j => j.nombre).join(', '); indicadorJuegoHtml = `<span class="badge bg-info" title="Parte de: ${nombresJuegos}"><i class="fas fa-cubes"></i></span>`; } if(gF){ const c=document.createElement('div');c.className='product-card';c.dataset.id=p.id; c.innerHTML=`<div class="product-image"><img src="${img}" alt="${p.nombre||''}" loading="lazy" onerror="this.onerror=null; this.src='${DEFAULT_IMAGE_SVG}';"></div><div class="product-series" style="background-color:${sC}" title="Serie: ${sN}">${sN}</div><div class="product-info"><h3 title="${p.nombre} (${p.codigo})">${p.nombre||'S/N'} (${p.codigo||'S/C'}) ${indicadorJuegoHtml}</h3><p style="font-size:0.8em;color:#6c757d;margin-bottom:0.3rem;">Marca: <strong>${mN}</strong></p><p title="${p.descripcion||''}">${p.descripcion||'S/D'}</p><div class="product-price">S/ ${p.precio.toFixed(2)}</div><div class="product-actions"><button type="button" class="btn-info view-btn" data-action="view" data-id="${p.id}" title="Ver Detalles"><i class="fas fa-eye"></i></button><button type="button" class="btn-warning edit-grid-btn" data-action="edit" data-id="${p.id}" title="Editar"><i class="fas fa-edit"></i></button><button type="button" class="btn-danger delete-grid-btn" data-action="delete" data-id="${p.id}" title="Eliminar"><i class="fas fa-trash"></i></button></div></div>`; gF.appendChild(c); } if(tF){ const r=document.createElement('tr');r.dataset.id=p.id; r.innerHTML=`<td>${p.codigo||'S/C'}</td><td>${p.nombre||'S/N'} ${indicadorJuegoHtml}</td><td>${mN}</td><td title="${sN}">${s?`<span class="color-swatch" style="background-color:${sC};"></span>`:''} ${sN}</td><td>${p.medida||'-'}</td><td style="text-align:right;">S/ ${p.precio.toFixed(2)}</td><td style="text-align:right;">S/ ${p.precioMayor.toFixed(2)}</td><td style="text-align:right;">S/ ${p.costo.toFixed(2)}</td><td style="text-align:right;">$ ${p.fob.toFixed(2)}</td><td style="text-align:center;font-weight:bold;">${p.stock}</td><td><button type="button" class="btn-warning edit-table-btn action-button" data-action="edit" data-id="${p.id}" title="Editar ${p.nombre}"><i class="fas fa-edit"></i> Editar</button><button type="button" class="btn-danger delete-table-btn action-button" data-action="delete" data-id="${p.id}" title="Eliminar ${p.nombre}"><i class="fas fa-trash"></i></button></td>`; tF.appendChild(r); } }
        _handleEmptyState(fC,tC,fT,gEId,tWId,tRId,tCol,icon,tN,addFn){const gE=gEId?document.getElementById(gEId):null,tW=tWId?document.getElementById(tWId):null,tR=tRId?document.getElementById(tRId):null;const isOE=tC===0,isRE=fC===0;if(gE)gE.style.display=(gEId&&isRE)?'block':'none';if(tW)tW.style.display=(tWId&&isRE)?'block':'none';if(isRE){const isSE=!isOE&&fT;let cI=icon,txt=`Aún no hay ${tN.toLowerCase()}s.`;let btn='';const addFN=addFn?addFn.name:null,addOC=addFN?`sistema.${addFN}(true)`:'';if(gEId&&addOC)btn=`<button type="button" class="btn-primary" onclick="${addOC}"><i class="fas fa-plus"></i> Agregar ${tN}</button>`;if(isSE){cI='<i class="fas fa-search"></i>';txt=`No hay ${tN.toLowerCase()}s para "<strong>${fT}</strong>".`;let clA='';if(gEId){clA=`document.getElementById('searchInput').value=''; document.getElementById('filtroPertenenciaJuego').value='todos'; sistema.filterProducts('');`;} else if(tWId==='priceTableEmptyStateWrapper')clA=`document.getElementById('priceTableSearchInput').value=''; sistema.filterPriceTable('');`;else clA=`console.log('Clear ${tWId}')`;btn=`<button type="button" class="btn-secondary" onclick="${clA}"><i class="fas fa-times"></i> Limpiar</button>`;}else if(isOE&&tRId&&addOC)btn=`<br><button type="button" class="btn-primary" style="margin-top:1rem;" onclick="${addOC}"><i class="fas fa-plus"></i> Agregar ${tN}</button>`;const h=`<span class="empty-state-icon">${cI}</span><p>${txt}</p>${btn}`;if(gE)gE.innerHTML=h;if(tR)tR.innerHTML=`<td colspan="${tCol}">${h}</td>`;}}
        populateSeriesSelect(id='productSeries'){const s=document.getElementById(id);if(!s)return;const v=s.value;s.innerHTML='<option value="">-- Selecciona Serie --</option>';this.series.sort((a,b)=>a.nombre.localeCompare(b.nombre)).forEach(i=>s.add(new Option(`${i.nombre} (${i.codigo})`,i.codigo)));s.value=this.series.some(i=>i.codigo===v)?v:"";}
        populateCategorySelect(id='productCategory'){const s=document.getElementById(id);if(!s)return;const v=s.value;s.innerHTML='<option value="" disabled selected>-- Selecciona Categoría --</option>';this.categorias.sort((a,b)=>a.nombre.localeCompare(b.nombre)).forEach(c=>s.add(new Option(c.nombre,c.nombre)));s.value=this.categorias.some(c=>c.nombre===v)?v:"";}
        populateMarcaSelect(id='productBrand'){const s=document.getElementById(id);if(!s)return;const v=s.value;s.innerHTML='<option value="" disabled selected>-- Selecciona Marca --</option>';this.marcas.sort((a,b)=>a.nombre.localeCompare(b.nombre)).forEach(m=>s.add(new Option(m.nombre,m.id)));s.value=this.marcas.some(m=>String(m.id)===v)?v:"";}
        populateJuegoProductSelect(selectId = 'juegoProductoSelect') { const select = $(`#${selectId}`); if (!select.length) return; select.empty().append(new Option('-- Buscar y seleccionar --', '')); this.productos.sort((a, b) => a.nombre.localeCompare(b.nombre)).forEach(p => { const optionText = `${p.nombre} (${p.codigo || 'S/C'}) - Stock: ${p.stock}`; select.append(new Option(optionText, p.id)); }); select.trigger('change'); }

        inicializarEventos(){
            try {
                document.getElementById('searchInput')?.addEventListener('input', e => { clearTimeout(this.debounceTimer); this.debounceTimer = setTimeout(() => this.filterProducts(e.target.value), 300); });
                document.getElementById('priceTableSearchInput')?.addEventListener('input', e => { clearTimeout(this.priceTableDebounceTimer); this.priceTableDebounceTimer = setTimeout(() => this.filterPriceTable(e.target.value), 300); });
                document.getElementById('importFile')?.addEventListener('change', e => this.importFromExcel(e));
                document.getElementById('exportExcel')?.addEventListener('click', () => this.exportToExcel());
                document.getElementById('clearDataBtn')?.addEventListener('click', () => BackupManager.clearAllData());
                document.getElementById('filtroPertenenciaJuego')?.addEventListener('change', () => this.renderProductGridAndTable());
                document.getElementById('addProductoBtn')?.addEventListener('click', () => this.showProductModal(true));
                document.getElementById('addSeriesBtnTable')?.addEventListener('click', () => this.showSeriesModal(true));
                document.getElementById('addCategoryBtnTable')?.addEventListener('click', () => this.showCategoryModal(true));
                document.getElementById('addMarcaBtnTable')?.addEventListener('click', () => this.showMarcaModal(true));
                document.getElementById('productForm')?.addEventListener('submit', e => { e.preventDefault(); this.handleSaveProduct(); });
                document.getElementById('seriesForm')?.addEventListener('submit', e => { e.preventDefault(); this.handleSaveSeries(); });
                document.getElementById('categoryForm')?.addEventListener('submit', e => { e.preventDefault(); this.handleSaveCategory(); });
                document.getElementById('marcaForm')?.addEventListener('submit', e => { e.preventDefault(); this.handleSaveMarca(); });
                document.getElementById('addJuegoBtn')?.addEventListener('click', () => this.showJuegoModal(true));
                document.getElementById('juegoForm')?.addEventListener('submit', e => { e.preventDefault(); this.handleSaveJuego(); });
                document.getElementById('backup-exportar-general')?.addEventListener('click', () => BackupManager.exportarBackupGeneral());
                document.getElementById('backup-importar-general-file')?.addEventListener('change', (e) => BackupManager.importarBackupGeneral(e));
                document.getElementById('backup-seleccionar-general-carpeta')?.addEventListener('click', () => BackupManager.seleccionarCarpetaBackup());
                document.getElementById('backup-guardar-general-configuracion')?.addEventListener('click', () => BackupManager.guardarConfiguracionBackup());

                const pM = document.getElementById('productModal'); if (pM) { pM.querySelectorAll('input[type="file"][id^="productImage"]').forEach(i => { i.addEventListener('change', this.handleImagePreview.bind(this)); }); pM.querySelectorAll('button.btn-remove-img').forEach(b => { b.addEventListener('click', this.handleRemoveImageClick.bind(this)); }); const productTab = pM.querySelector('#productTab'); if (productTab) { productTab.addEventListener('click', (event) => { const targetLink = event.target.closest('.nav-link'); if (targetLink) { event.preventDefault(); const targetPaneId = targetLink.getAttribute('data-bs-target').substring(1); const targetLinkId = targetLink.id; this._activateProductModalTab(targetLinkId, targetPaneId); } }); } const addAplicacionBtn = pM.querySelector('#addAplicacionBtn'); if (addAplicacionBtn) { addAplicacionBtn.addEventListener('click', () => { const vehiculo = document.getElementById('appVehiculo').value.trim(); const marca = document.getElementById('appMarcaVehiculo').value.trim(); const codigoJuego = document.getElementById('appCodigoJuego').value.trim(); const nombreJuego = document.getElementById('appNombreJuego').value.trim(); if (!vehiculo && !marca && !codigoJuego && !nombreJuego) { Swal.fire('Datos Incompletos', 'Ingrese al menos un dato para la aplicación directa.', 'warning'); return; } const appData = { vehiculo, marca, codigoJuego, nombreJuego }; this._addAplicacionToList(appData); document.getElementById('appVehiculo').value = ''; document.getElementById('appMarcaVehiculo').value = ''; document.getElementById('appCodigoJuego').value = ''; document.getElementById('appNombreJuego').value = ''; }); } const aplicacionesList = pM.querySelector('#aplicacionesList'); if (aplicacionesList) { aplicacionesList.addEventListener('click', (event) => { const removeButton = event.target.closest('.remove-aplicacion-btn'); if (removeButton) { removeButton.closest('.list-group-item').remove(); this._updateAplicacionesEmptyState(); } }); } }
                const jM = document.getElementById('juegoModal'); if (jM) { const addJuegoAppBtn = jM.querySelector('#addJuegoAplicacionBtn'); if (addJuegoAppBtn) { addJuegoAppBtn.addEventListener('click', () => { const vehiculo = document.getElementById('juegoAppVehiculo').value.trim(); const marca = document.getElementById('juegoAppMarca').value.trim(); if (!vehiculo && !marca) { Swal.fire('Datos Incompletos', 'Ingrese al menos Vehículo o Marca para la aplicación del juego.', 'warning'); return; } const appData = { vehiculo: vehiculo, marcaVehiculo: marca }; this._addJuegoAplicacionToList(appData); document.getElementById('juegoAppVehiculo').value = ''; document.getElementById('juegoAppMarca').value = ''; }); } const juegoAppList = jM.querySelector('#juegoAplicacionesList'); if (juegoAppList) { juegoAppList.addEventListener('click', (event) => { const removeBtn = event.target.closest('.remove-juego-aplicacion-btn'); if (removeBtn) { removeBtn.closest('.list-group-item').remove(); this._updateJuegoAplicacionesEmptyState(); } }); } const addJuegoProdBtn = jM.querySelector('#addJuegoProductoBtn'); if (addJuegoProdBtn) { addJuegoProdBtn.addEventListener('click', () => { const selectedProductId = $('#juegoProductoSelect').val(); const cantidad = parseInt(document.getElementById('juegoProductoCantidad').value) || 1; if (!selectedProductId) { Swal.fire("Producto no seleccionado", "Seleccione un producto para añadir.", "warning"); return; } if (cantidad < 1) { Swal.fire("Cantidad Inválida", "La cantidad debe ser al menos 1.", "warning"); return;} const list = document.getElementById('juegoProductosList'); if (list && list.querySelector(`.list-group-item[data-product-id="${selectedProductId}"]`)) { Swal.fire("Producto Duplicado", "Este producto ya está en el juego.", "info"); return; } const product = this.getProductById(parseInt(selectedProductId)); if (product) { this._addJuegoProductoToList(product.id, product.nombre, product.codigo, cantidad); $('#juegoProductoSelect').val(null).trigger('change'); document.getElementById('juegoProductoCantidad').value = 1; this._actualizarTotalesJuegoModal(); } else { Swal.fire("Error", "Producto seleccionado no encontrado.", "error"); } }); } const juegoProdList = jM.querySelector('#juegoProductosList'); if (juegoProdList) { juegoProdList.addEventListener('click', (event) => { const removeBtn = event.target.closest('.remove-juego-producto-btn'); if (removeBtn) { removeBtn.closest('.list-group-item').remove(); this._updateJuegoProductosEmptyState(); this._actualizarTotalesJuegoModal(); } }); } }
                document.querySelectorAll('.modal-header-btn[id^="modalNuevoBtn"]').forEach(b => b.addEventListener('click', this.handleModalNuevoClick.bind(this)));
                this._setupDelegatedListeners();
                const zoomOverlay = document.getElementById('imageZoomOverlay'); if (zoomOverlay) { zoomOverlay.addEventListener('click', (event) => { if (event.target === zoomOverlay || event.target.closest('.zoom-close-btn')) { this.hideImageZoom(); } }); document.getElementById('zoomPrevBtn')?.addEventListener('click', (e) => { e.stopPropagation(); this._navigateZoom(-1); }); document.getElementById('zoomNextBtn')?.addEventListener('click', (e) => { e.stopPropagation(); this._navigateZoom(1); }); }
                const mIds = ['productModal', 'seriesModal', 'categoryModal', 'marcaModal', 'productDetail', 'juegoModal'];
                window.addEventListener('keydown', e => { if (e.key === 'Escape') { if (document.getElementById('imageZoomOverlay')?.style.display === 'flex') { this.hideImageZoom(); } else { mIds.forEach(id => this.hideModal(id)); } } });
                document.querySelectorAll('.modal .close-btn, .modal .modal-footer-actions button[data-modal-id]').forEach(btn => { btn.addEventListener('click', (e) => { const modalId = e.target.closest('.close-btn, button[data-modal-id]').dataset.modalId; if(modalId) this.hideModal(modalId); }); });
                mIds.forEach(id => { const m = document.getElementById(id); if (m) m.addEventListener('click', e => { if (e.target === m) this.hideModal(id); }); });
            } catch (error) { console.error("Err Crítico Listeners Repuestos:", error); Swal.fire("Error Crítico", "No se pudieron inicializar los eventos de Repuestos: " + error.message, "error");}
        }

        handleImagePreview(e){const i=e.target,pId=i.dataset.preview,rId=i.dataset.remove,p=document.getElementById(pId),rB=document.getElementById(rId);if(!i||!p||!rB){console.error("Preview/Remove elements not found for:",i.id);return;}const f=i.files?i.files[0]:null;if(f){const rd=new FileReader();rd.onloadend=()=>{if(rd.result.length>MAX_DATA_URL_LENGTH)Swal.fire('Imagen Grande', `La imagen es muy grande (${(rd.result.length/1024/1024).toFixed(1)}MB) y podría afectar el rendimiento.`, 'warning');p.src=rd.result;rB.style.display='block';};rd.onerror=()=>{console.error("Err read img.");p.src=DEFAULT_IMAGE_SVG;rB.style.display='none';};rd.readAsDataURL(f);}}
        handleRemoveImageClick(e){const b=e.target.closest('button');if(!b)return;const iId=b.dataset.input,pId=b.dataset.preview,i=document.getElementById(iId),p=document.getElementById(pId);if(p)p.src=DEFAULT_IMAGE_SVG;if(i)i.value=null;b.style.display='none';}
        handleModalNuevoClick(e){const b=e.target.closest('button'),mType=b?.dataset.modaltype;if(!mType)return;const cModalId=b.closest('.modal')?.id;if(cModalId)this.hideModal(cModalId);switch(mType){case'product':this.showProductModal(true);break;case'series':this.showSeriesModal(true);break;case'category':this.showCategoryModal(true);break;case'marca':this.showMarcaModal(true);break; case 'juego': this.showJuegoModal(true); break; default:console.warn("Tipo modal desc:",mType);}}
        _setupDelegatedListeners(){ const m=document.querySelector('.main-content');if(!m)return; m.addEventListener('click',e=>{ const b=e.target.closest('button[data-action]'); const c=e.target.closest('.product-card[data-id]'); if(b?.dataset.id){ e.stopPropagation(); const a=b.dataset.action,id=parseInt(b.dataset.id); if(isNaN(id))return; const t=b.closest('.product-grid,#priceTableBody,#seriesTableBody,#categoryTableBody,#marcaTableBody,#juegosTableBody'); if(!t)return; switch(t.id){ case'productGrid':case'priceTableBody':this._handleProductActionClick(a,id);break; case'seriesTableBody':this._handleManagementActionClick('Series',a,id);break; case'categoryTableBody':this._handleManagementActionClick('Category',a,id);break; case'marcaTableBody':this._handleManagementActionClick('Marca',a,id);break; case 'juegosTableBody': this._handleManagementActionClick('Juego', a, id); break; } } else if(c?.dataset.id && !e.target.closest('button')){ const id=parseInt(c.dataset.id); if(!isNaN(id)) this.showProductDetailModal(id); } }); const dM=document.getElementById('productDetail'); if(dM){ dM.addEventListener('click',e=>{ const b=e.target.closest('button[id]'); if(!b || !this.currentEditProductId)return; const actions = { 'editProductDetailBtn': () => { this.hideModal('productDetail'); this.showProductModal(false,this.currentEditProductId); }, 'deleteProductDetailBtn': () => { const p=this.getProductById(this.currentEditProductId); if(p){ this.hideModal('productDetail'); this.confirmDeleteProduct(p.id,p.nombre); } } }; if(actions[b.id]) actions[b.id](); }); } }
        _handleProductActionClick(a,id){switch(a){case'view':this.showProductDetailModal(id);break;case'edit':this.showProductModal(false,id);break;case'delete':const p=this.getProductById(id);if(p)this.confirmDeleteProduct(id,p.nombre);break;}}
        _handleManagementActionClick(t,a,id){let i,sF,dF,cF,n;switch(t){case'Series':i=this.getSerieById(id);sF=this.showSeriesModal;dF=this.confirmDeleteSerie;n=i?.nombre;break;case'Category':i=this.getCategoryById(id);sF=this.showCategoryModal;dF=this.confirmDeleteCategory;n=i?.nombre;break;case'Marca':i=this.getMarcaById(id);sF=this.showMarcaModal;dF=this.confirmDeleteMarca;n=i?.nombre;break; case 'Juego': i = this.getJuegoById(id); sF = this.showJuegoModal; dF = this.confirmDeleteJuego; cF = this.cloneJuego; n = i?.nombre || i?.codigo; break; default:return;}if(!i){Swal.fire("Error", `${t} con ID ${id} no encontrado.`, "error");return;}if(a==='edit')sF.call(this,false,id);else if(a==='delete')dF.call(this,id,n); else if(a==='clone' && cF)cF.call(this,id);}

        showModal(id) { const m = document.getElementById(id); if (m) { m.style.display = 'flex'; const focusable = m.querySelector('input:not([type="hidden"]):not([type="color"]):not([type="file"]), select:not(.select2-hidden-accessible), textarea, button:not(.close-btn)'); if (focusable) setTimeout(() => focusable.focus(), 50); document.body.classList.add('modal-open'); } }
        hideModal(id) { const m = document.getElementById(id); if (m && m.style.display !== 'none') { m.style.display = 'none'; if (id === 'juegoModal' && $('#juegoProductoSelect').data('select2')) { $('#juegoProductoSelect').select2('destroy'); } const propMap = {'productModal': 'currentEditProductId', 'seriesModal': 'currentEditSeriesId', 'categoryModal': 'currentEditCategoryId', 'marcaModal': 'currentEditMarcaId', 'productDetail': 'currentEditProductId', 'juegoModal': 'currentEditJuegoId'}; if (propMap[id]) this[propMap[id]] = null; const anyModalOpen = Array.from(document.querySelectorAll('.modal')).some(modal => modal.style.display === 'flex'); if (!anyModalOpen && document.getElementById('imageZoomOverlay')?.style.display !== 'flex') { document.body.classList.remove('modal-open'); } } }
        showProductModal(isNew = true, id = null) { const form = document.getElementById('productForm'); const modalLabel = document.getElementById('productModalLabel'); if (!form || !modalLabel) return; form.reset(); form.classList.remove('was-validated'); modalLabel.textContent = isNew ? 'Agregar Producto' : 'Editar Producto'; document.getElementById('productId').value = isNew ? '' : id; this.currentEditProductId = isNew ? null : id; for (let i = 1; i <= MAX_IMAGES; i++) { const s = i === 1 ? '' : i; const iIn = document.getElementById(`productImage${s}`); const iPre = document.getElementById(`imagePreview${s}`); const rBtn = document.getElementById(`removeProductImageBtn${s}`); if (iIn) iIn.value = null; if (iPre) iPre.src = DEFAULT_IMAGE_SVG; if (rBtn) rBtn.style.display = 'none'; } this.populateCategorySelect(); this.populateSeriesSelect(); this.populateMarcaSelect(); const aplicacionesList = document.getElementById('aplicacionesList'); const emptyMsg = aplicacionesList?.querySelector('.empty-aplicaciones'); if (aplicacionesList) { aplicacionesList.innerHTML = ''; if (emptyMsg) aplicacionesList.appendChild(emptyMsg.cloneNode(true)); } this._updateAplicacionesEmptyState(); if (!isNew && id !== null) { const product = this.getProductById(id); if (product) { this._fillProductForm(product); product.imagenes.forEach((imgSrc, index) => { if (index < MAX_IMAGES) { const s = (index === 0) ? '' : (index + 1); const iPre = document.getElementById(`imagePreview${s}`); const rBtn = document.getElementById(`removeProductImageBtn${s}`); if (iPre) iPre.src = imgSrc || DEFAULT_IMAGE_SVG; if (rBtn && imgSrc && imgSrc !== DEFAULT_IMAGE_SVG) rBtn.style.display = 'block'; } }); if (product.aplicaciones && product.aplicaciones.length > 0) { product.aplicaciones.forEach(app => this._addAplicacionToList(app)); } this._updateAplicacionesEmptyState(); } else { Swal.fire("Error", "Producto no encontrado.", "error"); this.hideModal('productModal'); return; } } else { document.getElementById('productBrand').selectedIndex = 0; document.getElementById('productCategory').selectedIndex = 0; document.getElementById('productSeries').value = ""; this._updateAplicacionesEmptyState(); } this._resetProductModalTabs(); this.showModal('productModal'); }
        _fillProductForm(p){ const setV=(i,v)=>{const e=document.getElementById(i);if(e){e.value=v??'';}else console.warn(`[DEBUG] _fill: Elemento ${i} no hallado`);}; setV('productCode',p.codigo); setV('productName',p.nombre); setV('productBrand',p.marcaId); setV('productCategory',p.categoria); setV('productMeasure',p.medida); setV('productSeries',p.seriesId); setV('productPrice',p.precio); setV('productPrecioMayor',p.precioMayor); setV('productCost',p.costo); setV('productFOBCost',p.fob); setV('productStock',p.stock); setV('productDescription',p.descripcion); }
        showSeriesModal(isNew=true,id=null){const f=document.getElementById('seriesForm'),l=document.getElementById('seriesModalLabel'),c=document.getElementById('seriesCode');if(!f||!l||!c)return;f.reset();f.classList.remove('was-validated');l.textContent=isNew?'Agregar Serie':'Editar Serie';document.getElementById('seriesId').value=isNew?'':id;this.currentEditSeriesId=isNew?null:id;c.readOnly=!isNew;c.style.backgroundColor=isNew?'':'#e9ecef';c.style.cursor=isNew?'':'not-allowed';if(!isNew&&id!==null){const s=this.getSerieById(id);if(s)this._fillSeriesForm(s);else{Swal.fire("Error", "Serie no encontrada.", "error");this.hideModal('seriesModal');return;}}else document.getElementById('seriesColor').value='#3498db';this.showModal('seriesModal');}
        _fillSeriesForm(s){document.getElementById('seriesCode').value=s.codigo;document.getElementById('seriesName').value=s.nombre;document.getElementById('seriesColor').value=s.color;}
        showCategoryModal(isNew=true,id=null){const f=document.getElementById('categoryForm'),l=document.getElementById('categoryModalLabel');if(!f||!l)return;f.reset();f.classList.remove('was-validated');l.textContent=isNew?'Agregar Categoría':'Editar Categoría';document.getElementById('categoryId').value=isNew?'':id;this.currentEditCategoryId=isNew?null:id;if(!isNew&&id!==null){const c=this.getCategoryById(id);if(c)document.getElementById('categoryName').value=c.nombre;else{Swal.fire("Error", "Categoría no encontrada.", "error");this.hideModal('categoryModal');return;}}this.showModal('categoryModal');}
        showMarcaModal(isNew=true,id=null){const f=document.getElementById('marcaForm'),l=document.getElementById('marcaModalLabel');if(!f||!l)return;f.reset();f.classList.remove('was-validated');l.textContent=isNew?'Agregar Marca':'Editar Marca';document.getElementById('marcaId').value=isNew?'':id;this.currentEditMarcaId=isNew?null:id;if(!isNew&&id!==null){const m=this.getMarcaById(id);if(m)document.getElementById('marcaName').value=m.nombre;else{Swal.fire("Error", "Marca no encontrada.", "error");this.hideModal('marcaModal');return;}}this.showModal('marcaModal');}
        showProductDetailModal(id) { const p = this.getProductById(id); if (!p) { Swal.fire("Error", "Producto no encontrado.", "error"); return; } this.currentEditProductId = id; const s = this.getSerieByCode(p.seriesId), cat = this.getCategoryByName(p.categoria), marca = this.getMarcaById(p.marcaId); const setTxt = (elId, txt) => { const el = document.getElementById(elId); if (el) el.textContent = txt ?? 'N/A'; }; setTxt('detailProductNameLabel', p.nombre); setTxt('detailProductCategory', cat?.nombre || p.categoria || 'S/C'); setTxt('detailProductCode', p.codigo); setTxt('detailProductBrand', marca?.nombre || 'Sin Marca'); setTxt('detailProductDescription', p.descripcion || 'Sin descripción'); setTxt('detailProductMeasure', p.medida || '-'); setTxt('detailProductSeries', s?.nombre || 'Sin Serie'); setTxt('detailProductStock', String(p.stock)); setTxt('detailProductPrice', `S/ ${p.precio.toFixed(2)}`); setTxt('detailProductPrecioMayor', `S/ ${p.precioMayor.toFixed(2)}`); setTxt('detailProductCost', `S/ ${p.costo.toFixed(2)}`); setTxt('detailProductFOBCost', `$ ${p.fob.toFixed(2)}`); const mainImg = document.getElementById('detailMainImage'), thumbCont = document.getElementById('detailThumbnailContainer'); const images = (p.imagenes && p.imagenes.length > 0) ? p.imagenes.filter(img => img !== DEFAULT_IMAGE_SVG) : []; const displayImages = images.length > 0 ? images : [DEFAULT_IMAGE_SVG]; if (mainImg && thumbCont) { thumbCont.innerHTML = ''; mainImg.src = displayImages[0]; mainImg.alt = `${p.nombre || 'Imagen'} 1`; mainImg.onerror = () => { mainImg.src = DEFAULT_IMAGE_SVG; }; mainImg.onclick = (event) => { event.preventDefault(); this.showImageZoom(displayImages, 0); }; displayImages.forEach((imgSrc, index) => { const th = document.createElement('img'); th.src = imgSrc; th.alt = `Miniatura ${index + 1}`; th.className = 'detail-thumbnail'; th.dataset.fullSrc = imgSrc; th.dataset.index = index; th.loading = 'lazy'; th.onerror = () => { th.style.display = 'none'; }; th.onclick = (event) => this.handleThumbnailClick(event, displayImages); if (index === 0) th.classList.add('active-thumbnail'); thumbCont.appendChild(th); }); if (images.length === 0 && displayImages[0] === DEFAULT_IMAGE_SVG) { mainImg.onclick = null; thumbCont.innerHTML = '<small class="text-muted" style="padding-left: 5px;">Sin imágenes</small>'; } } else console.error("Gallery elements missing!"); const appContainer = document.getElementById('detailProductAplicaciones'); if (appContainer) { appContainer.innerHTML = ''; if (p.aplicaciones && p.aplicaciones.length > 0) { const appList = document.createElement('ul'); appList.style.listStyle = 'none'; appList.style.paddingLeft = '0'; appList.style.marginTop = '0.5rem'; p.aplicaciones.forEach(app => { const li = document.createElement('li'); li.style.fontSize = '0.9em'; li.style.marginBottom = '0.3rem'; li.innerHTML = `<strong>Aplicación (Legado):</strong> ${app.vehiculo || '?'} (${app.marca || '?'}) - ${app.nombreJuego || '?'} (${app.codigoJuego || '?'})`; appList.appendChild(li); }); const title = document.createElement('strong'); title.textContent = "Aplicaciones Directas (Legado):"; title.style.display = 'block'; title.style.marginBottom = '0.5rem'; title.style.color = 'orange'; appContainer.appendChild(title); appContainer.appendChild(appList); } } const juegoContainer = document.getElementById('detailProductJuegos'); if (juegoContainer) { juegoContainer.innerHTML = ''; const relatedJuegos = this.juegos.filter(j => j.componentes.some(comp => comp.productoId === p.id)); if (relatedJuegos.length > 0) { const juegoList = document.createElement('ul'); juegoList.style.listStyle = 'none'; juegoList.style.paddingLeft = '0'; juegoList.style.marginTop = '0.5rem'; relatedJuegos.forEach(juego => { const li = document.createElement('li'); li.style.fontSize = '0.9em'; li.style.marginBottom = '0.3rem'; li.innerHTML = `<strong>Pertenece al Juego:</strong> ${juego.nombre} (<code>${juego.codigo}</code>)`; juegoList.appendChild(li); }); const title = document.createElement('strong'); title.textContent = "Parte de Juegos:"; title.style.display = 'block'; title.style.marginBottom = '0.5rem'; juegoContainer.appendChild(title); juegoContainer.appendChild(juegoList); } } this.showModal('productDetail'); }
    handleThumbnailClick(e, imageList) { const t = e.target; const m = document.getElementById('detailMainImage'); const c = document.getElementById('detailThumbnailContainer'); if (!t || !m || !c || !t.classList.contains('detail-thumbnail')) return; const nS = t.dataset.fullSrc; const index = parseInt(t.dataset.index, 10); if (nS && m.src !== nS) { m.src = nS; m.alt = t.alt.replace('Miniatura', 'Imagen'); c.querySelectorAll('.detail-thumbnail').forEach(th => th.classList.remove('active-thumbnail')); t.classList.add('active-thumbnail'); m.onclick = (event) => { event.preventDefault(); this.showImageZoom(imageList, index); }; } }
    showJuegoModal(isNew = true, id = null, clonedData = null) { const form = document.getElementById('juegoForm'); const modalLabel = document.getElementById('juegoModalLabel'); const codigoInput = document.getElementById('juegoCodigo'); if (!form || !modalLabel || !codigoInput) return; form.reset(); form.classList.remove('was-validated'); modalLabel.textContent = isNew ? (clonedData ? 'Clonar Juego de Productos' : 'Agregar Juego de Productos') : 'Editar Juego de Productos'; document.getElementById('juegoId').value = isNew && !clonedData ? '' : id; this.currentEditJuegoId = isNew && !clonedData ? null : id; codigoInput.readOnly = !isNew || clonedData; codigoInput.style.backgroundColor = (!isNew || clonedData) ? '#e9ecef' : ''; codigoInput.style.cursor = (!isNew || clonedData) ? 'not-allowed' : ''; const appList = document.getElementById('juegoAplicacionesList'); const prodList = document.getElementById('juegoProductosList'); if (appList) appList.innerHTML = '<li class="list-group-item empty-juego-aplicaciones empty-state-list-item" style="display: list-item;">No hay aplicaciones agregadas.</li>'; if (prodList) prodList.innerHTML = '<li class="list-group-item empty-juego-productos empty-state-list-item" style="display: list-item;">No hay productos agregados.</li>'; this.populateJuegoProductSelect(); $('#juegoProductoSelect').select2({ placeholder: "-- Buscar y seleccionar producto --", dropdownParent: $('#juegoModal'), allowClear: true }); $('#juegoProductoSelect').val(null).trigger('change'); if ((!isNew && id !== null) || clonedData) { const juego = clonedData || this.getJuegoById(id); if (juego) { document.getElementById('juegoCodigo').value = clonedData ? (juego.codigo + "-COPIA") : juego.codigo; document.getElementById('juegoNombre').value = clonedData ? (juego.nombre + " (Copia)") : juego.nombre; if (juego.aplicaciones && juego.aplicaciones.length > 0) { juego.aplicaciones.forEach(app => this._addJuegoAplicacionToList(app)); } if (juego.componentes && juego.componentes.length > 0) { juego.componentes.forEach(comp => { const product = this.getProductById(comp.productoId); if (product) { this._addJuegoProductoToList(product.id, product.nombre, product.codigo, comp.cantidad); } else { console.warn(`Producto ID ${comp.productoId} en Juego ${juego.codigo} no encontrado.`); this._addJuegoProductoToList(comp.productoId, `ID ${comp.productoId} (No Encontrado)`, '???', comp.cantidad, true); } }); } if (clonedData) { document.getElementById('juegoId').value = ''; this.currentEditJuegoId = null; } } else if(!clonedData) { Swal.fire("Error", "Juego no encontrado.", "error"); this.hideModal('juegoModal'); return; } } this._updateJuegoAplicacionesEmptyState(); this._updateJuegoProductosEmptyState(); this._actualizarTotalesJuegoModal(); this.showModal('juegoModal'); }
    cloneJuego(juegoId) { const juegoOriginal = this.getJuegoById(juegoId); if (juegoOriginal) { this.showJuegoModal(true, null, juegoOriginal); } else { Swal.fire("Error", "No se pudo encontrar el juego para clonar.", "error"); } }

    handleSaveProduct() { const f = document.getElementById('productForm'); const datosTab = document.getElementById('tabDatos'); let isValid = true; datosTab.querySelectorAll('[required]').forEach(input => { if (!input.checkValidity()) { isValid = false; if (isValid) input.focus(); } }); if (!isValid) { f.classList.add('was-validated'); this._activateProductModalTab('datos-tab', 'tabDatos'); Swal.fire("Campos Incompletos", "Complete los campos obligatorios (*) en la pestaña 'Datos Principales'.", "warning"); return; } f.classList.remove('was-validated'); const cod = document.getElementById('productCode')?.value.trim(); const nom = document.getElementById('productName')?.value.trim(); const mIdV = document.getElementById('productBrand')?.value; const cat = document.getElementById('productCategory')?.value; const serId = document.getElementById('productSeries')?.value; const mId = parseInt(mIdV) || null; const isE = this.currentEditProductId !== null; const id = isE ? this.currentEditProductId : this.nextProductId; if (this.productos.find(p => p.codigo === cod && p.id !== id)) { Swal.fire("Código Duplicado", `El código de producto "${cod}" ya existe.`, "error"); this._activateProductModalTab('datos-tab', 'tabDatos'); document.getElementById('productCode')?.focus(); f.classList.add('was-validated'); return; } const fImgs = []; let lrgWarn = false; for (let i = 1; i <= MAX_IMAGES; i++) { const s = i === 1 ? '' : i; const p = document.getElementById(`imagePreview${s}`); if (p && p.src && p.src !== DEFAULT_IMAGE_SVG) { fImgs.push(p.src); if (p.src.length > MAX_DATA_URL_LENGTH) lrgWarn = true; } } if (fImgs.length === 0) fImgs.push(DEFAULT_IMAGE_SVG); if (lrgWarn) console.warn("Guardando imagen(es) grande(s)."); const aplicacionesLegado = []; document.querySelectorAll('#aplicacionesList .list-group-item:not(.empty-aplicaciones)').forEach(item => { const appData = { vehiculo: item.dataset.vehiculo || '', marca: item.dataset.marca || '', codigoJuego: item.dataset.codigojuego || '', nombreJuego: item.dataset.nombrejuego || '' }; aplicacionesLegado.push(appData); }); const pD = new Producto( id, cod, nom, mId, document.getElementById('productDescription')?.value.trim() || '', cat || '', document.getElementById('productMeasure')?.value.trim() || '', parseFloat(document.getElementById('productPrice')?.value) || 0, parseFloat(document.getElementById('productCost')?.value) || 0, parseFloat(document.getElementById('productFOBCost')?.value) || 0, parseInt(document.getElementById('productStock')?.value) || 0, serId || '', fImgs, parseFloat(document.getElementById('productPrecioMayor')?.value) || 0, aplicacionesLegado ); if (!isE) { pD.id = this.nextProductId++; this.productos.push(pD); } else { const ix = this.productos.findIndex(p => p.id === id); if (ix !== -1) { this.productos[ix] = pD; } else { Swal.fire("Error Fatal", "Producto no hallado durante la actualización.", "error"); return; } } this.saveToLocalStorage(); this.renderProductGridAndTable(); this.renderPriceTableOnly(); this.hideModal('productModal'); Swal.fire("Guardado", `Producto "${nom}" guardado exitosamente.`, "success"); }
    handleSaveSeries(){const f=document.getElementById('seriesForm');if(!f.checkValidity()){f.classList.add('was-validated');Swal.fire("Campos Incompletos", "Por favor, complete todos los campos obligatorios.", "warning");f.querySelector(':invalid')?.focus();return;}f.classList.remove('was-validated');const isE=this.currentEditSeriesId!==null,id=isE?this.currentEditSeriesId:this.nextSeriesId,cI=document.getElementById('seriesCode'),nI=document.getElementById('seriesName'),colI=document.getElementById('seriesColor'),nom=nI.value.trim(),col=colI.value;let cod;if(isE)cod=cI.value;else{cod=cI.value.trim().toLowerCase().replace(/[^a-z0-9_-]/g,'');if(!cod||!/^[a-z0-9_-]+$/.test(cod)){Swal.fire("Código Inválido", "El código de serie solo puede contener minúsculas, números, guiones (-) y guiones bajos (_).", "error");cI.focus();f.classList.add('was-validated');return;}if(this.series.some(s=>s.codigo===cod)){Swal.fire("Código Duplicado", `El código de serie "${cod}" ya existe.`, "error");cI.focus();f.classList.add('was-validated');return;}}if(!nom){Swal.fire("Nombre Requerido", "El nombre de la serie es obligatorio.", "warning");nI.focus();f.classList.add('was-validated');return;}const d={id:id,codigo:cod,nombre:nom,color:col};if(!isE){d.id=this.nextSeriesId++;this.series.push(new Serie(...Object.values(d)));}else{const i=this.series.findIndex(s=>s.id===id);if(i!==-1)this.series[i]=new Serie(...Object.values(d));else{Swal.fire("Error Fatal", "Serie no encontrada durante la actualización.", "error");return;}}this.saveToLocalStorage();this.renderSeriesTable();this.populateSeriesSelect();this.renderProductGridAndTable();this.renderPriceTableOnly();this.hideModal('seriesModal');Swal.fire("Guardado", `Serie "${nom}" guardada exitosamente.`, "success");}
    handleSaveCategory(){const f=document.getElementById('categoryForm');if(!f.checkValidity()){f.classList.add('was-validated');Swal.fire("Nombre Requerido", "El nombre de la categoría es obligatorio.", "warning");f.querySelector(':invalid')?.focus();return;}f.classList.remove('was-validated');const isE=this.currentEditCategoryId!==null,id=isE?this.currentEditCategoryId:this.nextCategoryId,nI=document.getElementById('categoryName'),nom=nI.value.trim();if(!nom){Swal.fire("Nombre Requerido", "El nombre de la categoría es obligatorio.", "warning");nI.focus();f.classList.add('was-validated');return;}const nL=nom.toLowerCase();if(this.categorias.find(c=>c.nombre.toLowerCase()===nL&&c.id!==id)){Swal.fire("Categoría Duplicada", `La categoría "${nom}" ya existe.`, "error");nI.focus();f.classList.add('was-validated');return;}let oN='';if(isE){const c=this.getCategoryById(id);if(!c)return;oN=c.nombre;}const d={id:id,nombre:nom};if(!isE){d.id=this.nextCategoryId++;this.categorias.push(new Categoria(...Object.values(d)));}else{const i=this.categorias.findIndex(c=>c.id===id);if(i!==-1)this.categorias[i]=new Categoria(...Object.values(d));else{Swal.fire("Error Fatal", "Categoría no encontrada durante la actualización.", "error");return;}}if(isE&&oN&&oN!==nom){let c=0;this.productos.forEach(p=>{if(p.categoria===oN){p.categoria=nom;c++;}});if(c>0)console.log(`${c} prod(s) actualizados a cat "${nom}".`);}this.saveToLocalStorage();this.renderCategoryTable();this.populateCategorySelect();this.renderProductGridAndTable();this.renderPriceTableOnly();this.hideModal('categoryModal');Swal.fire("Guardado", `Categoría "${nom}" guardada exitosamente.`, "success");}
    handleSaveMarca(){const f=document.getElementById('marcaForm');if(!f.checkValidity()){f.classList.add('was-validated');Swal.fire("Nombre Requerido", "El nombre de la marca es obligatorio.", "warning");f.querySelector(':invalid')?.focus();return;}f.classList.remove('was-validated');const isE=this.currentEditMarcaId!==null,id=isE?this.currentEditMarcaId:this.nextMarcaId,nI=document.getElementById('marcaName'),nom=nI.value.trim();if(!nom){Swal.fire("Nombre Requerido", "El nombre de la marca es obligatorio.", "warning");nI.focus();f.classList.add('was-validated');return;}const nL=nom.toLowerCase();if(this.marcas.find(m=>m.nombre.toLowerCase()===nL&&m.id!==id)){Swal.fire("Marca Duplicada", `La marca "${nom}" ya existe.`, "error");nI.focus();f.classList.add('was-validated');return;}const d=new Marca(id,nom);if(!isE){d.id=this.nextMarcaId++;this.marcas.push(d);}else{const i=this.marcas.findIndex(m=>m.id===id);if(i!==-1)this.marcas[i]=d;else{Swal.fire("Error Fatal", "Marca no encontrada durante la actualización.", "error");return;}}this.saveToLocalStorage();this.renderMarcasTable();this.populateMarcaSelect();this.renderProductGridAndTable();this.renderPriceTableOnly();this.hideModal('marcaModal');Swal.fire("Guardado", `Marca "${nom}" guardada exitosamente.`, "success");}
    async handleSaveJuego() { const form = document.getElementById('juegoForm'); if (!form.checkValidity()) { form.classList.add('was-validated'); Swal.fire("Campos Incompletos", "Complete los campos obligatorios (*).", "warning"); form.querySelector(':invalid')?.focus(); return; } form.classList.remove('was-validated'); const isEditing = this.currentEditJuegoId !== null; const id = isEditing ? this.currentEditJuegoId : this.nextJuegoId; const codigoInput = document.getElementById('juegoCodigo'); const nombreInput = document.getElementById('juegoNombre'); const nombre = nombreInput.value.trim(); let codigo; if (isEditing) { codigo = codigoInput.value; } else { codigo = codigoInput.value.trim().toUpperCase().replace(/\s+/g, '-'); if (!codigo) { Swal.fire("Código Requerido", "El Código del Juego es obligatorio.", "warning"); codigoInput.focus(); form.classList.add('was-validated'); return; } if (this.juegos.some(j => j.codigo === codigo)) { Swal.fire("Código Duplicado", `El código de juego "${codigo}" ya existe.`, "error"); codigoInput.focus(); form.classList.add('was-validated'); return; } } if (!nombre) { Swal.fire("Nombre Requerido", "El Nombre del Juego es obligatorio.", "warning"); nombreInput.focus(); form.classList.add('was-validated'); return; } const aplicaciones = []; document.querySelectorAll('#juegoAplicacionesList .list-group-item:not(.empty-juego-aplicaciones)').forEach(item => { aplicaciones.push({ vehiculo: item.dataset.vehiculo || '', marcaVehiculo: item.dataset.marcavehiculo || '' }); }); const componentes = []; document.querySelectorAll('#juegoProductosList .list-group-item:not(.empty-juego-productos)').forEach(item => { const prodId = parseInt(item.dataset.productId); const cantidad = parseInt(item.dataset.cantidad) || 1; if (!isNaN(prodId) && prodId > 0 && cantidad > 0) { componentes.push({ productoId: prodId, cantidad: cantidad }); } }); if (componentes.length === 0) { const confirmation = await Swal.fire({ title: 'Juego Vacío', text: "El juego no contiene productos. ¿Desea guardarlo de todas formas?", icon: 'warning', showCancelButton: true, confirmButtonText: 'Sí, guardar', cancelButtonText: 'No, añadir productos' }); if (!confirmation.isConfirmed) { $('#juegoProductoSelect').select2('open'); return; } } const juegoData = new JuegoProducto(id, codigo, nombre, aplicaciones, componentes); if (!isEditing) { juegoData.id = this.nextJuegoId++; this.juegos.push(juegoData); } else { const index = this.juegos.findIndex(j => j.id === id); if (index !== -1) { this.juegos[index] = juegoData; } else { Swal.fire("Error Fatal", "Juego no encontrado durante la actualización.", "error"); return; } } this.saveToLocalStorage(); this.renderJuegosTable(); this.hideModal('juegoModal'); Swal.fire("Guardado", `Juego "${nombre}" guardado exitosamente.`, "success"); }

    async confirmDeleteProduct(id,n){const result = await Swal.fire({title:`¿Eliminar producto "${n}" (ID: ${id})?`, text:"Esta acción no se puede deshacer.", icon:'warning', showCancelButton:true, confirmButtonColor:'#d33', cancelButtonColor:'#3085d6', confirmButtonText:'Sí, eliminar', cancelButtonText:'Cancelar'}); if(result.isConfirmed)this.deleteProduct(id);}
    deleteProduct(id){ const initialLength = this.productos.length; let affectedJuegosMessages = []; this.juegos.forEach(juego => { const initialCompLength = juego.componentes.length; juego.componentes = juego.componentes.filter(comp => comp.productoId !== id); if (juego.componentes.length < initialCompLength) { affectedJuegosMessages.push(`Removido de ${juego.codigo}`); } }); this.productos=this.productos.filter(p=>p.id!==id); if(this.productos.length<initialLength){ this.saveToLocalStorage(); this.renderProductGridAndTable(); this.renderPriceTableOnly(); this.renderJuegosTable(); let msg = "Producto eliminado."; if (affectedJuegosMessages.length > 0) { msg += "
" + affectedJuegosMessages.join('; '); } Swal.fire("Eliminado", msg, "success"); }else Swal.fire("Error", "No se pudo eliminar el producto.", "error"); }
    async confirmDeleteSerie(id,n){const s=this.getSerieById(id);if(!s)return;const c=this.productos.filter(p=>p.seriesId===s.codigo).length;let m=`¿Eliminar serie "${n}" (${s.codigo})?`;if(c>0)m+=`

${c} producto(s) usarán la serie por defecto.`;m+="

Esta acción no se puede deshacer."; const result = await Swal.fire({title:"Confirmar Eliminación", html:m.replace(/
/g, '<br>'), icon:'warning', showCancelButton:true, confirmButtonColor:'#d33', cancelButtonColor:'#3085d6', confirmButtonText:'Sí, eliminar', cancelButtonText:'Cancelar'}); if(result.isConfirmed)this.deleteSerie(id);}
    deleteSerie(id){const s=this.getSerieById(id);if(!s)return;const l=this.series.length;let u=0;this.productos.forEach(p=>{if(p.seriesId===s.codigo){p.seriesId='';u++;}});this.series=this.series.filter(ser=>ser.id!==id);if(this.series.length<l){this.saveToLocalStorage();this.renderSeriesTable();this.populateSeriesSelect();this.renderProductGridAndTable();this.renderPriceTableOnly();Swal.fire("Eliminada", `Serie "${s.nombre}" eliminada. ${u} producto(s) actualizados.`, "success");}else Swal.fire("Error", "No se pudo eliminar la serie.", "error");}
    async confirmDeleteCategory(id,n){const c=this.productos.filter(p=>p.categoria===n).length;let m=`¿Eliminar categoría "${n}"?`;if(c>0)m+=`

${c} producto(s) quedarán sin categoría.`;m+="

Esta acción no se puede deshacer."; const result = await Swal.fire({title:"Confirmar Eliminación", html:m.replace(/
/g, '<br>'), icon:'warning', showCancelButton:true, confirmButtonColor:'#d33', cancelButtonColor:'#3085d6', confirmButtonText:'Sí, eliminar', cancelButtonText:'Cancelar'}); if(result.isConfirmed)this.deleteCategory(id,n);}
    deleteCategory(id,n){const l=this.categorias.length;let u=0;this.productos.forEach(p=>{if(p.categoria===n){p.categoria='';u++;}});this.categorias=this.categorias.filter(c=>c.id!==id);if(this.categorias.length<l){this.saveToLocalStorage();this.renderCategoryTable();this.populateCategorySelect();this.renderProductGridAndTable();this.renderPriceTableOnly();Swal.fire("Eliminada", `Categoría "${n}" eliminada. ${u} producto(s) actualizados.`, "success");}else Swal.fire("Error", "No se pudo eliminar la categoría.", "error");}
    async confirmDeleteMarca(id,n){const mO=this.getMarcaById(id);if(!mO)return;const c=this.productos.filter(p=>p.marcaId===id).length;let msg=`¿Eliminar marca "${n}" (ID: ${id})?`;if(c>0)msg+=`

${c} producto(s) quedarán 'Sin Marca'.`;msg+="

Esta acción no se puede deshacer."; const result = await Swal.fire({title:"Confirmar Eliminación", html:msg.replace(/
/g, '<br>'), icon:'warning', showCancelButton:true, confirmButtonColor:'#d33', cancelButtonColor:'#3085d6', confirmButtonText:'Sí, eliminar', cancelButtonText:'Cancelar'}); if(result.isConfirmed)this.deleteMarca(id,n);}
    deleteMarca(id,n){const l=this.marcas.length;let u=0;this.productos.forEach(p=>{if(p.marcaId===id){p.marcaId=null;u++;}});this.marcas=this.marcas.filter(m=>m.id!==id);if(this.marcas.length<l){this.saveToLocalStorage();this.renderMarcasTable();this.populateMarcaSelect();this.renderProductGridAndTable();this.renderPriceTableOnly();Swal.fire("Eliminada", `Marca "${n}" eliminada. ${u} producto(s) actualizados.`, "success");}else Swal.fire("Error", "No se pudo eliminar la marca.", "error");}
    async confirmDeleteJuego(id, name) { const result = await Swal.fire({title:`¿Eliminar el juego "${name}" (ID: ${id})?`, text:"Esta acción no se puede deshacer.", icon:'warning', showCancelButton:true, confirmButtonColor:'#d33', cancelButtonColor:'#3085d6', confirmButtonText:'Sí, eliminar', cancelButtonText:'Cancelar'}); if(result.isConfirmed)this.deleteJuego(id); }
    deleteJuego(id) { const initialLength = this.juegos.length; this.juegos = this.juegos.filter(j => j.id !== id); if (this.juegos.length < initialLength) { this.saveToLocalStorage(); this.renderJuegosTable(); Swal.fire("Eliminado", "Juego eliminado exitosamente.", "success"); } else { Swal.fire("Error", "No se pudo eliminar el juego.", "error"); } }

    filterProducts(t){this.currentFilter=t.toLowerCase().trim();this.renderProductGridAndTable();} filterPriceTable(t){this.priceTableFilter=t.toLowerCase().trim();this.renderPriceTableOnly();}
    getProductById(id){return this.productos.find(p=>p.id===id);} getSerieById(id){return this.series.find(s=>s.id===id);} getSerieByCode(c){return this.series.find(s=>s.codigo===c);} getCategoryById(id){return this.categorias.find(c=>c.id===id);} getCategoryByName(n){return this.categorias.find(c=>c.nombre.toLowerCase()===n?.toLowerCase());} getMarcaById(id){return this.marcas.find(m=>m.id===id);} getMarcaByName(n){return this.marcas.find(m=>m.nombre.toLowerCase()===n?.toLowerCase());}
    getJuegoById(id) { return this.juegos.find(j => j.id === id); }
    getJuegoByCodigo(codigo) { return this.juegos.find(j => j.codigo === codigo); }

    async importFromExcel(e){ showLoading("Importando productos..."); const fIn=e.target,file=fIn.files[0];if(!file){fIn.value=null; hideLoading(); return;} const r=new FileReader(); r.onload= async (ev)=>{ try{ const d=new Uint8Array(ev.target.result),wb=XLSX.read(d,{type:'array',cellDates:true}),sN=wb.SheetNames[0],ws=wb.Sheets[sN],json=XLSX.utils.sheet_to_json(ws,{header:1,range:0,defval:''}); if(json.length<1)throw new Error("Archivo Excel vacío o sin datos."); let hI=-1,h=[]; const req=['codigo','nombre']; const opt=['marca','descripcion','categoria','medida','precio_venta','precio_mayor','costo','costo_fob','stock','serie']; for(let i=0;i<Math.min(10,json.length);i++){ const p=json[i].map(hd=>String(hd||'').toLowerCase().trim().replace(/\s+/g,'_').replace(/[().$/]/g,'')); if(req.every(rq=>p.includes(rq))){h=p;hI=i;break;} } if(hI===-1)throw new Error(`Columnas requeridas (${req.join(', ')}) no encontradas en las primeras 10 filas.`); const hM={}; h.forEach((hd,ix)=>{ let k=hd; if(hd==='precio_ventas')k='precio_venta'; if(hd==='preciomayor'||hd==='precio_mayor_s')k='precio_mayor'; if(hd==='costo_s')k='costo'; if(hd==='costofob'||hd==='costo_fob_')k='costo_fob'; if(hd==='serie_codigo'||hd==='cod_serie'||hd==='serie_nombre')k='serie'; if(hd==='categoria_nombre'||hd==='cat')k='categoria'; if(hd==='marca_nombre')k='marca'; if(req.includes(k)||opt.includes(k)){if(!hM[k])hM[k]=ix;} }); const dR=json.slice(hI+1).filter(rw=>rw.length>0&&rw[hM.codigo]&&String(rw[hM.codigo]).trim()!==''&&rw[hM.nombre]&&String(rw[hM.nombre]).trim()!==''); if(dR.length===0)throw new Error("No se encontraron filas de datos válidas."); const confirmResult = await Swal.fire({title: 'Confirmar Importación', html: `Se importarán ${dR.length} productos.<br><b>¡Esto REEMPLAZARÁ TODOS los productos existentes!</b><br>(Series, Categorías, Marcas y Juegos no se verán afectados).`, icon: 'warning', showCancelButton: true, confirmButtonText: 'Sí, importar', cancelButtonText: 'Cancelar'}); if(!confirmResult.isConfirmed){fIn.value=null; hideLoading(); return;} this.productos=[]; this.nextProductId=1; let iC=0,sC=0; const iCo=new Set(); dR.forEach((row,rI)=>{ const rN=hI+rI+2,cod=String(row[hM.codigo]).trim(); if(iCo.has(cod)){console.warn(`F${rN} omitida: Código "${cod}" dupe.`);sC++;return;} iCo.add(cod); const nom=String(row[hM.nombre]).trim(); const gV=(k,d='')=>(hM[k]!==undefined&&row[hM[k]]!==undefined)?String(row[hM[k]]).trim():d; const gF=(k,d=0)=>parseFloat(String(gV(k)).replace(/[^0-9.-]/g,''))||d; const gI=(k,d=0)=>parseInt(String(gV(k)).replace(/[^0-9]/g,''))||d; const sI=gV('serie'),fS=sI?this.series.find(s=>s.codigo===sI.toLowerCase()||s.nombre.toLowerCase()===sI.toLowerCase()):null,sCo=fS?fS.codigo:''; if(sI&&!fS)console.warn(`F${rN}: Serie "${sI}" no hallada.`); const cI=gV('categoria'),fC=cI?this.getCategoryByName(cI):null,cNom=fC?fC.nombre:(cI||''); if(cI&&!fC)console.warn(`F${rN}: Cat "${cI}" no hallada.`); const mI=gV('marca'),fM=mI?this.getMarcaByName(mI):null,mId=fM?fM.id:null; if(mI&&!fM)console.warn(`F${rN}: Marca "${mI}" no hallada.`); const nP=new Producto(this.nextProductId++, cod, nom, mId, gV('descripcion'), cNom, gV('medida'), gF('precio_venta'), gF('costo'), gF('costo_fob'), gI('stock'), sCo, [DEFAULT_IMAGE_SVG], gF('precio_mayor'), []); this.productos.push(nP); iC++; }); this.saveToLocalStorage(); this.recalculateNextIds(); this.renderAll(); Swal.fire("Importación Completa", `Productos importados: ${iC}. Omitidos (códigos duplicados): ${sC}.`, "success"); }catch(err){ console.error("Err import:",err); Swal.fire("Error de Importación", err.message, "error"); }finally{ fIn.value=null; hideLoading(); } }; r.onerror=()=>{Swal.fire("Error", "Error al leer el archivo.", "error");fIn.value=null; hideLoading();}; r.readAsArrayBuffer(file); }
    exportToExcel(){ if(this.productos.length===0){Swal.fire("Sin Datos", "No hay productos para exportar.", "info");return;} showLoading("Exportando productos..."); setTimeout(() => { try{ const d=this.productos.map(p=>{ const s=this.getSerieByCode(p.seriesId),cat=this.getCategoryByName(p.categoria),m=this.getMarcaById(p.marcaId); return{'Codigo':p.codigo,'Nombre':p.nombre,'Marca':m?m.nombre:'','Descripcion':p.descripcion,'Categoria':cat?.nombre||p.categoria||'','Medida':p.medida,'Precio_Venta':p.precio,'Precio_Mayor':p.precioMayor,'Costo':p.costo,'Costo_FOB':p.fob,'Stock':p.stock,'Serie':s?s.nombre:'',}; }); const w=XLSX.utils.json_to_sheet(d),c=Object.keys(d[0]||{}),cW=c.map(k=>{let mL=k.length;d.forEach(r=>{const v=r[k]??'',l=String(v).length;if(l>mL)mL=l;});return{wch:Math.min(mL+2,60)};});w['!cols']=cW; const b=XLSX.utils.book_new();XLSX.utils.book_append_sheet(b,w,"Productos"); const t=new Date().toISOString().slice(0,10).replace(/-/g,'');XLSX.writeFile(b,`catalogo_repuestos_${t}.xlsx`); Swal.fire("Exportación Exitosa", `${d.length} productos exportados a Excel.`, "success"); }catch(e){console.error("Err export:",e);Swal.fire("Error de Exportación", "Ocurrió un error al generar el archivo Excel.", "error");} finally { hideLoading(); } }, 50); }

    _resetProductModalTabs() { const tabContainer = document.getElementById('productTab'); const contentContainer = document.getElementById('productTabContent'); if (!tabContainer || !contentContainer) return; tabContainer.querySelectorAll('.nav-link').forEach(link => link.classList.remove('active')); contentContainer.querySelectorAll('.tab-pane').forEach(pane => pane.classList.remove('active')); const firstTabLink = tabContainer.querySelector('#datos-tab'); const firstTabPane = contentContainer.querySelector('#tabDatos'); if (firstTabLink) firstTabLink.classList.add('active'); if (firstTabPane) firstTabPane.classList.add('active'); }
    _activateProductModalTab(targetLinkId, targetPaneId) { const modal = document.getElementById('productModal'); if (!modal) return; modal.querySelectorAll('#productTab .nav-link').forEach(link => link.classList.remove('active')); modal.querySelectorAll('#productTabContent .tab-pane').forEach(pane => pane.classList.remove('active')); const link = modal.querySelector(`#${targetLinkId}`); const pane = modal.querySelector(`#${targetPaneId}`); if (link) link.classList.add('active'); if (pane) pane.classList.add('active'); }
    _addAplicacionToList(appData) { const aplicacionesList = document.getElementById('aplicacionesList'); if (!aplicacionesList) return; const item = document.createElement('li'); item.className = 'list-group-item'; item.dataset.vehiculo = appData.vehiculo || ''; item.dataset.marca = appData.marca || ''; item.dataset.codigojuego = appData.codigoJuego || ''; item.dataset.nombrejuego = appData.nombreJuego || ''; item.innerHTML = ` <div class="aplicacion-details"> ${appData.vehiculo ? `<span><strong>Vehículo:</strong> ${appData.vehiculo}</span>` : ''} ${appData.marca ? `<span><strong>Marca:</strong> ${appData.marca}</span>` : ''} ${appData.codigoJuego ? `<span><strong>Cód. Juego:</strong> ${appData.codigoJuego}</span>` : ''} ${appData.nombreJuego ? `<span><strong>Nom. Juego:</strong> ${appData.nombreJuego}</span>` : ''} ${!appData.vehiculo && !appData.marca && !appData.codigoJuego && !appData.nombreJuego ? '<span>(Datos incompletos)</span>' : ''} </div> <button type="button" class="btn btn-danger btn-sm remove-aplicacion-btn" title="Eliminar Aplicación">&times;</button> `; const emptyMsg = aplicacionesList.querySelector('.empty-aplicaciones'); if (emptyMsg) { aplicacionesList.insertBefore(item, emptyMsg); } else { aplicacionesList.appendChild(item); } this._updateAplicacionesEmptyState(); }
    _updateAplicacionesEmptyState() { const aplicacionesList = document.getElementById('aplicacionesList'); const emptyMsg = aplicacionesList?.querySelector('.empty-aplicaciones'); if (!aplicacionesList || !emptyMsg) return; const itemCount = aplicacionesList.querySelectorAll('.list-group-item:not(.empty-aplicaciones)').length; emptyMsg.style.display = itemCount === 0 ? 'list-item' : 'none'; }
    _addJuegoAplicacionToList(appData) { const list = document.getElementById('juegoAplicacionesList'); if (!list) return; const item = document.createElement('li'); item.className = 'list-group-item'; item.dataset.vehiculo = appData.vehiculo || ''; item.dataset.marcavehiculo = appData.marcaVehiculo || ''; item.innerHTML = `<div class="aplicacion-details"> ${appData.vehiculo ? `<span><strong>Vehículo:</strong> ${appData.vehiculo}</span>` : ''} ${appData.marcaVehiculo ? `<span><strong>Marca:</strong> ${appData.marcaVehiculo}</span>` : ''} ${!appData.vehiculo && !appData.marcaVehiculo ? '<span>(Datos incompletos)</span>' : ''} </div> <button type="button" class="btn btn-danger btn-sm remove-juego-aplicacion-btn" title="Quitar Aplicación">&times;</button>`; const emptyMsg = list.querySelector('.empty-juego-aplicaciones'); if (emptyMsg) { list.insertBefore(item, emptyMsg); } else { list.appendChild(item); } this._updateJuegoAplicacionesEmptyState(); }
    _updateJuegoAplicacionesEmptyState() { const list = document.getElementById('juegoAplicacionesList'); const emptyMsg = list?.querySelector('.empty-juego-aplicaciones'); if (!list || !emptyMsg) return; const itemCount = list.querySelectorAll('.list-group-item:not(.empty-juego-aplicaciones)').length; emptyMsg.style.display = itemCount === 0 ? 'list-item' : 'none'; }
    _addJuegoProductoToList(productId, productName, productCode, cantidad = 1, isMissing = false) { const list = document.getElementById('juegoProductosList'); if (!list) return; const producto = this.getProductById(productId); const item = document.createElement('li'); item.className = `list-group-item ${isMissing ? 'text-danger' : ''}`; item.dataset.productId = productId; item.dataset.cantidad = cantidad; let stockInfo = 'N/A'; let precioInfo = 'N/A'; let stockSuficiente = true; if (producto) { stockInfo = producto.stock; precioInfo = producto.precio.toFixed(2); if (producto.stock < cantidad && !isMissing) { stockSuficiente = false; item.classList.add('item-sin-stock'); } } else if (!isMissing) { isMissing = true; } item.innerHTML = `<div class="producto-details"> <span> <strong>${productName}</strong> (${productCode || '???'})${isMissing ? ' - NO ENCONTRADO' : ''} <small class="text-muted d-block"> Cant: ${cantidad} | Stock: ${stockInfo} | Precio Unit: S/ ${precioInfo} ${!stockSuficiente && !isMissing ? '<strong class="text-danger ms-2"> (Stock Insuficiente!)</strong>' : ''} </small> </span> </div> <button type="button" class="btn btn-danger btn-sm remove-juego-producto-btn" title="Quitar Producto">&times;</button>`; const emptyMsg = list.querySelector('.empty-juego-productos'); if (emptyMsg) { list.insertBefore(item, emptyMsg); } else { list.appendChild(item); } this._updateJuegoProductosEmptyState(); }
    _updateJuegoProductosEmptyState() { const list = document.getElementById('juegoProductosList'); const emptyMsg = list?.querySelector('.empty-juego-productos'); if (!list || !emptyMsg) return; const itemCount = list.querySelectorAll('.list-group-item:not(.empty-juego-productos)').length; emptyMsg.style.display = itemCount === 0 ? 'list-item' : 'none'; }
    _actualizarTotalesJuegoModal() { const prodList = document.getElementById('juegoProductosList'); let costoTotal = 0; let precioTotal = 0; if (prodList) { prodList.querySelectorAll('.list-group-item:not(.empty-juego-productos)').forEach(item => { const prodId = parseInt(item.dataset.productId); const cantidad = parseInt(item.dataset.cantidad) || 1; const producto = this.getProductById(prodId); if (producto) { costoTotal += (producto.costo || 0) * cantidad; precioTotal += (producto.precio || 0) * cantidad; } }); } document.getElementById('juegoCostoTotal').textContent = `S/ ${costoTotal.toFixed(2)}`; document.getElementById('juegoPrecioTotal').textContent = `S/ ${precioTotal.toFixed(2)}`; }

    showImageZoom(imageList = [], startIndex = 0) { const overlay = document.getElementById('imageZoomOverlay'); if (!overlay || !imageList || imageList.length === 0) return; this._zoomedImages = imageList.filter(img => img !== DEFAULT_IMAGE_SVG); if (this._zoomedImages.length === 0 && imageList.length === 1 && imageList[0] === DEFAULT_IMAGE_SVG) { return; } else if (this._zoomedImages.length === 0) { this._zoomedImages = [DEFAULT_IMAGE_SVG]; } this._currentZoomIndex = Math.max(0, Math.min(startIndex, this._zoomedImages.length - 1)); this._updateZoomNavigation(); overlay.style.display = 'flex'; document.body.classList.add('modal-open'); }
    hideImageZoom() { const overlay = document.getElementById('imageZoomOverlay'); if (overlay) { overlay.style.display = 'none'; document.getElementById('zoomedImage').src = ''; this._zoomedImages = []; this._currentZoomIndex = 0; const anyModalOpen = Array.from(document.querySelectorAll('.modal')).some(modal => modal.style.display === 'flex'); if (!anyModalOpen) { document.body.classList.remove('modal-open'); } } }
    _navigateZoom(direction) { if (!this._zoomedImages || this._zoomedImages.length <= 1) return; this._currentZoomIndex += direction; this._currentZoomIndex = Math.max(0, Math.min(this._currentZoomIndex, this._zoomedImages.length - 1)); this._updateZoomNavigation(); }
    _updateZoomNavigation() { const zoomedImage = document.getElementById('zoomedImage'); const prevBtn = document.getElementById('zoomPrevBtn'); const nextBtn = document.getElementById('zoomNextBtn'); if (!zoomedImage || !prevBtn || !nextBtn || !this._zoomedImages || this._zoomedImages.length === 0) { this.hideImageZoom(); return; } zoomedImage.src = this._zoomedImages[this._currentZoomIndex]; zoomedImage.onerror = () => { zoomedImage.src = DEFAULT_IMAGE_SVG; }; prevBtn.disabled = this._currentZoomIndex === 0; nextBtn.disabled = this._currentZoomIndex === this._zoomedImages.length - 1; const showNav = this._zoomedImages.length > 1; prevBtn.style.display = showNav ? 'flex' : 'none'; nextBtn.style.display = showNav ? 'flex' : 'none'; }
}
