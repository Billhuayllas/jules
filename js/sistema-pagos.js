"use strict";
    const SistemaPagos = {
        modoEdicion: false, idEdicion: null, initialized: false,
        memoryStorage: {
            DB_NAME: 'appDB_Pagos', PENDIENTES_STORE: 'pagos_pendientes_data', HISTORIAL_STORE: 'pagos_historial_data',
            initDB: function() { if (typeof localforage !== 'undefined') { localforage.config({ driver: [localforage.INDEXEDDB, localforage.WEBSQL, localforage.LOCALSTORAGE], name: this.DB_NAME, storeName: 'mainStore' }); } else { console.error("localForage no está definido. Sistema de Pagos no funcionará correctamente."); } },
            async getPendientes() { return await localforage.getItem(this.PENDIENTES_STORE) || []; },
            async setPendientes(newData) { await localforage.setItem(this.PENDIENTES_STORE, newData); },
            async getHistorial() { return await localforage.getItem(this.HISTORIAL_STORE) || []; },
            async setHistorial(newData) { await localforage.setItem(this.HISTORIAL_STORE, newData); },
            async addToHistorial(pendiente) { let historial = await this.getHistorial(); const pagoRegistro = { ...pendiente, fechaPago: new Date().toISOString().split('T')[0] }; historial.push(pagoRegistro); await this.setHistorial(historial); },
            async clearData() { await localforage.removeItem(this.PENDIENTES_STORE); await localforage.removeItem(this.HISTORIAL_STORE); },
        },
        init: async function() { if (this.initialized) return; this.memoryStorage.initDB(); const fechaInput = document.getElementById('pagos-fecha'); if(fechaInput) fechaInput.valueAsDate = new Date(); this.configurarEventos(); const pendientesStored = await this.memoryStorage.getPendientes(); if (!pendientesStored || pendientesStored.length === 0) { this.cargarDatosEjemplo(); } await this.cargarDatos(); await this.cargarHistorial(); this.initialized = true; },
        renderView: async function() { if (!this.initialized) await this.init(); else { await this.cargarDatos(); await this.cargarHistorial(); } },
        configurarEventos: function() {
            const container = document.getElementById('pagosPendientesView'); if (!container) return;
            container.querySelector('#pagos-tab-pendientes')?.addEventListener('click', () => this.activarTab('pendientes'));
            container.querySelector('#pagos-tab-historial')?.addEventListener('click', () => this.activarTab('historial'));
            container.querySelector('#pagos-btn-agregar')?.addEventListener('click', () => this.guardarRegistro());
            container.querySelector('#pagos-buscar')?.addEventListener('input', () => this.cargarDatos());
            container.querySelector('#pagos-buscar-historial')?.addEventListener('input', () => this.cargarHistorial());
            container.querySelector('#pagos-descargar-busqueda')?.addEventListener('click', () => this.descargarResultadosComoImagen());
            container.querySelector('#pagos-exportar-json')?.addEventListener('click', () => this.exportarPendientesJSON());
            container.querySelector('#pagos-exportar-excel')?.addEventListener('click', () => this.exportarPendientesCSV());
            container.querySelector('#pagos-exportar-historial-json')?.addEventListener('click', () => this.exportarHistorialJSON());
            container.querySelector('#pagos-exportar-historial-excel')?.addEventListener('click', () => this.exportarHistorialCSV());
            container.querySelector('#pagos-importar-json')?.addEventListener('click', () => this.importarPendientesJSON());
            container.querySelector('#pagos-importar-excel')?.addEventListener('click', () => this.importarPendientesCSV());
            container.querySelector('#pagos-limpiar-datos')?.addEventListener('click', async () => { const result = await Swal.fire({ title: '¿Eliminar Datos de Pagos?', text: 'Se eliminarán solo los datos de Pendientes y Historial de Pagos.', icon: 'warning', showCancelButton: true, confirmButtonColor: '#d33', confirmButtonText: 'Sí, eliminar', cancelButtonText: 'Cancelar' }); if (result.isConfirmed) { await this.memoryStorage.clearData(); await this.cargarDatos(); await this.cargarHistorial(); Swal.fire('Datos Eliminados', 'Los registros de pagos han sido eliminados.', 'success'); } });
            const pendientesBody = container.querySelector('#pagos-pendientes-body'); if(pendientesBody) { pendientesBody.addEventListener('click', (event) => { const target = event.target.closest('.action-btn'); if (!target) return; const action = Array.from(target.classList).find(cls => cls.startsWith('btn-')); const id = target.getAttribute('data-id'); if (action === 'btn-editar') this.editarRegistro(id); else if (action === 'btn-eliminar') this.eliminarRegistro(id); else if (action === 'btn-pagado') this.marcarComoPagado(id); }); }
        },
        activarTab: function(tab) {
            const container = document.getElementById('pagosPendientesView'); if (!container) return;
            container.querySelectorAll('.tabs .tab').forEach(t => t.classList.remove('active'));
            container.querySelectorAll('#pagos-pendientes-content, #pagos-historial-content').forEach(c => c.style.display = 'none');
            const activeTabEl = container.querySelector(`#pagos-tab-${tab}`);
            const activeContentEl = container.querySelector(`#pagos-${tab}-content`);
            if(activeTabEl) activeTabEl.classList.add('active');
            if(activeContentEl) activeContentEl.style.display = 'block';
            if (tab === 'historial') this.cargarHistorial();
        },
        guardarRegistro: async function() { const fecha = document.getElementById('pagos-fecha').value; const nombre = document.getElementById('pagos-nombre').value.trim(); const descripcion = document.getElementById('pagos-descripcion').value.trim(); const totalInput = document.getElementById('pagos-total'); const total = parseFloat(totalInput.value); if (!fecha || !nombre || !descripcion || isNaN(total)) { Swal.fire('Campos Incompletos', 'Por favor, complete todos los campos correctamente.', 'warning'); return; } let pendientes = await this.memoryStorage.getPendientes(); if (this.modoEdicion && this.idEdicion !== null) { const index = pendientes.findIndex(item => item.id == this.idEdicion); if (index !== -1) { pendientes[index] = { id: parseInt(this.idEdicion), fecha, nombre, descripcion, total }; Swal.fire('Actualizado', 'Registro actualizado con éxito.', 'success'); } else { Swal.fire('Error', 'No se encontró el registro para actualizar.', 'error'); } this.modoEdicion = false; this.idEdicion = null; document.getElementById('pagos-btn-agregar').textContent = 'Agregar'; } else { const nuevoRegistro = { id: Date.now(), fecha, nombre, descripcion, total }; pendientes.push(nuevoRegistro); Swal.fire('Agregado', 'Registro agregado con éxito.', 'success'); } await this.memoryStorage.setPendientes(pendientes); document.getElementById('pagos-nombre').value = ''; document.getElementById('pagos-descripcion').value = ''; document.getElementById('pagos-total').value = ''; const fechaInput = document.getElementById('pagos-fecha'); if(fechaInput) fechaInput.valueAsDate = new Date(); await this.cargarDatos(); },
        cargarDatos: async function() { const tbody = document.getElementById('pagos-pendientes-body'); if (!tbody) return; const busqueda = document.getElementById('pagos-buscar')?.value.toLowerCase() || ''; let pendientes = await this.memoryStorage.getPendientes(); let filtrados = pendientes.filter(item => busqueda === '' || item.nombre.toLowerCase().includes(busqueda) || item.descripcion.toLowerCase().includes(busqueda) || item.fecha.includes(busqueda)); filtrados.sort((a, b) => new Date(a.fecha) - new Date(b.fecha)); tbody.innerHTML = ""; let sumaTotal = 0; filtrados.forEach(item => { let fechaFormateada; try { fechaFormateada = new Date(item.fecha + 'T00:00:00').toLocaleDateString(); } catch (e) { fechaFormateada = item.fecha; } const row = document.createElement('tr'); row.innerHTML = `<td>${fechaFormateada}</td><td>${item.nombre}</td><td>${item.descripcion}</td><td style="color: ${item.total < 0 ? 'red' : 'inherit'}; text-align: right;">${item.total.toFixed(2)}</td><td class="pagos-acciones-col"><button class="action-btn btn-editar" data-id="${item.id}">Editar</button><button class="action-btn btn-eliminar" data-id="${item.id}">Eliminar</button><button class="action-btn btn-pagado" data-id="${item.id}">Pagado</button></td>`; tbody.appendChild(row); sumaTotal += item.total; }); const sumaTotalEl = document.getElementById('pagos-suma-total'); if (sumaTotalEl) sumaTotalEl.textContent = sumaTotal.toFixed(2); },
        cargarHistorial: async function() { const tbody = document.getElementById('pagos-historial-body'); if (!tbody) return; const busqueda = document.getElementById('pagos-buscar-historial')?.value.toLowerCase() || ''; let historial = await this.memoryStorage.getHistorial(); historial = historial.filter(item => busqueda === '' || item.nombre.toLowerCase().includes(busqueda) || item.descripcion.toLowerCase().includes(busqueda) || item.fecha.includes(busqueda) || item.fechaPago.includes(busqueda)).sort((a, b) => new Date(b.fechaPago) - new Date(a.fechaPago)); tbody.innerHTML = ""; let sumaTotal = 0; historial.forEach(item => { let fechaPagoF, fechaRegF; try { fechaPagoF = new Date(item.fechaPago + 'T00:00:00').toLocaleDateString(); fechaRegF = new Date(item.fecha + 'T00:00:00').toLocaleDateString(); } catch (e) { fechaPagoF = item.fechaPago; fechaRegF = item.fecha; } const row = document.createElement('tr'); row.innerHTML = `<td>${fechaPagoF}</td><td>${fechaRegF}</td><td>${item.nombre}</td><td>${item.descripcion}</td><td style="color: ${item.total < 0 ? 'red' : 'inherit'}; text-align: right;">${item.total.toFixed(2)}</td>`; tbody.appendChild(row); sumaTotal += item.total; }); const sumaTotalHistEl = document.getElementById('pagos-suma-total-historial'); if(sumaTotalHistEl) sumaTotalHistEl.textContent = sumaTotal.toFixed(2); },
        eliminarRegistro: async function(id) { const result = await Swal.fire({ title: '¿Eliminar Registro Pendiente?', text: 'Esta acción es permanente.', icon: 'warning', showCancelButton: true, confirmButtonColor: '#d33', confirmButtonText: 'Sí, eliminar', cancelButtonText: 'Cancelar' }); if (result.isConfirmed) { let pendientes = await this.memoryStorage.getPendientes(); pendientes = pendientes.filter(item => item.id != id); await this.memoryStorage.setPendientes(pendientes); await this.cargarDatos(); Swal.fire('Eliminado', 'El registro pendiente ha sido eliminado.', 'success'); } },
        marcarComoPagado: async function(id) { const result = await Swal.fire({ title: '¿Marcar como Pagado?', text: 'El registro se moverá al historial.', icon: 'question', showCancelButton: true, confirmButtonColor: '#28a745', confirmButtonText: 'Sí, marcar pagado', cancelButtonText: 'Cancelar' }); if (result.isConfirmed) { let pendientes = await this.memoryStorage.getPendientes(); const index = pendientes.findIndex(item => item.id == id); if (index !== -1) { await this.memoryStorage.addToHistorial(pendientes[index]); pendientes.splice(index, 1); await this.memoryStorage.setPendientes(pendientes); await this.cargarDatos(); Swal.fire('Pagado', 'Registro marcado como pagado y movido al historial.', 'success'); } else { Swal.fire('Error', 'No se encontró el registro pendiente.', 'error'); } } },
        editarRegistro: async function(id) { let pendientes = await this.memoryStorage.getPendientes(); const registro = pendientes.find(item => item.id == id); if (registro) { document.getElementById('pagos-fecha').value = registro.fecha; document.getElementById('pagos-nombre').value = registro.nombre; document.getElementById('pagos-descripcion').value = registro.descripcion; document.getElementById('pagos-total').value = registro.total; this.modoEdicion = true; this.idEdicion = id; document.getElementById('pagos-btn-agregar').textContent = 'Actualizar'; document.getElementById('pagos-nombre').focus(); } },
        cargarDatosEjemplo: function() { const hoy = new Date().toISOString().split('T')[0]; const ayer = new Date(Date.now() - 86400000).toISOString().split('T')[0]; const anteayer = new Date(Date.now() - 2 * 86400000).toISOString().split('T')[0]; const datosPendientes = [ { id: 1, fecha: hoy, nombre: "Ejemplo Cliente 1", descripcion: "Servicio de consultoría con ñ", total: 1500.00 }, { id: 2, fecha: ayer, nombre: "Ejemplo Cliente 2", descripcion: "Pago parcial proyecto web", total: 2000.00 }, { id: 4, fecha: hoy, nombre: "Cliente ñ", descripcion: "Detalle ñ en el registro", total: 500.00 }]; const datosHistorial = [ { id: 3, fecha: anteayer, fechaPago: ayer, nombre: "Ejemplo Cliente 3", descripcion: "Diseño de logo", total: 500.00 } ]; this.memoryStorage.setPendientes(datosPendientes); this.memoryStorage.setHistorial(datosHistorial); },
        exportarPendientesJSON: async function() { const pendientes = await this.memoryStorage.getPendientes(); const dataStr = JSON.stringify(pendientes, null, 2); const dataUri = 'data:application/json;charset=utf-8,' + encodeURIComponent(dataStr); const a = document.createElement('a'); a.href = dataUri; a.download = "pagos_pendientes.json"; a.click(); },
        exportarPendientesCSV: async function() { const pendientes = await this.memoryStorage.getPendientes(); const bom = "﻿"; let csvContent = bom + "ID,Fecha,Nombre,Descripción,Total
"; pendientes.forEach(item => { csvContent += `${item.id},${item.fecha},"${(item.nombre || '').replace(/"/g, '""')}","${(item.descripcion || '').replace(/"/g, '""')}",${item.total}
`; }); const a = document.createElement("a"); a.href = "data:text/csv;charset=utf-8," + encodeURIComponent(csvContent); a.download = "pagos_pendientes.csv"; document.body.appendChild(a); a.click(); document.body.removeChild(a); },
        exportarHistorialJSON: async function() { const historial = await this.memoryStorage.getHistorial(); const dataStr = JSON.stringify(historial, null, 2); const dataUri = 'data:application/json;charset=utf-8,' + encodeURIComponent(dataStr); const a = document.createElement('a'); a.href = dataUri; a.download = "pagos_historial.json"; a.click(); },
        exportarHistorialCSV: async function() { const historial = await this.memoryStorage.getHistorial(); const bom = "﻿"; let csvContent = bom + "ID,Fecha Pago,Fecha Registro,Nombre,Descripción,Total
"; historial.forEach(item => { csvContent += `${item.id},${item.fechaPago},${item.fecha},"${(item.nombre || '').replace(/"/g, '""')}","${(item.descripcion || '').replace(/"/g, '""')}",${item.total}
`; }); const a = document.createElement("a"); a.href = "data:text/csv;charset=utf-8," + encodeURIComponent(csvContent); a.download = "pagos_historial.csv"; document.body.appendChild(a); a.click(); document.body.removeChild(a);},
        importarPendientesJSON: function() { const input = document.createElement('input'); input.type = 'file'; input.accept = '.json'; input.onchange = async e => { const file = e.target.files[0]; const reader = new FileReader(); reader.onload = async (event) => { try { const data = JSON.parse(event.target.result); if (Array.isArray(data) && data.every(item => 'id' in item && 'fecha' in item && 'nombre' in item && 'descripcion' in item && 'total' in item)) { await this.memoryStorage.setPendientes(data); await this.cargarDatos(); Swal.fire('Importación Exitosa', 'Datos de pendientes importados desde JSON.', 'success'); } else { Swal.fire('Error de Formato', 'El archivo JSON no tiene el formato esperado para pendientes.', 'error'); } } catch (error) { Swal.fire('Error al Importar', 'No se pudo procesar el archivo JSON: ' + error.message, 'error'); } }; reader.readAsText(file); }; input.click(); },
        importarPendientesCSV: function() { const input = document.createElement('input'); input.type = 'file'; input.accept = '.csv, text/csv'; input.onchange = async e => { const file = e.target.files[0]; const reader = new FileReader(); reader.onload = async (event) => { try { const text = event.target.result; const lines = text.split(/?
/); const result = []; const header = lines[0].split(',').map(h => h.trim().toLowerCase().replace(/"/g, '')); const idIndex = header.indexOf('id'); const fechaIndex = header.indexOf('fecha'); const nombreIndex = header.indexOf('nombre'); const descIndex = header.indexOf('descripción'); const totalIndex = header.indexOf('total'); if ([fechaIndex, nombreIndex, descIndex, totalIndex].some(i => i === -1)) { throw new Error("Columnas requeridas (Fecha, Nombre, Descripción, Total) no encontradas en el CSV."); } for (let i = 1; i < lines.length; i++) { if (lines[i].trim() === '') continue; const parts = this.parseCsvLine(lines[i]); if (parts.length > Math.max(fechaIndex, nombreIndex, descIndex, totalIndex)) { let rawFecha = (parts[fechaIndex] || '').trim(); let isoFecha = this.convertirFecha((rawFecha || '').replace(/"/g, '')); let rawMonto = (parts[totalIndex] || '').trim().replace(/[^\d.-]/g, ""); let monto = parseFloat(rawMonto) || 0; result.push({ id: idIndex !== -1 ? parseInt(parts[idIndex]) || Date.now() + i : Date.now() + i, fecha: isoFecha, nombre: (parts[nombreIndex] || '').replace(/"/g, ''), descripcion: (parts[descIndex] || '').replace(/"/g, ''), total: monto }); } } if (result.length > 0) { await this.memoryStorage.setPendientes(result); await this.cargarDatos(); Swal.fire('Importación Exitosa', `${result.length} registros de pendientes importados desde CSV.`, 'success'); } else { Swal.fire('Sin Datos', 'No se encontraron datos válidos para importar en el archivo CSV.', 'info'); } } catch (error) { Swal.fire('Error al Importar', 'No se pudo procesar el archivo CSV: ' + error.message, 'error'); } }; reader.readAsText(file); }; input.click(); },
        parseCsvLine: function(line) { const result = []; let currentField = ''; let inQuotes = false; for (let i = 0; i < line.length; i++) { const char = line[i]; if (char === '"' && (i === 0 || line[i - 1] !== '\')) { inQuotes = !inQuotes; } else if (char === ',' && !inQuotes) { result.push(currentField); currentField = ''; } else { currentField += char; } } result.push(currentField); return result; },
        convertirFecha: function(str) { str = str.trim(); if (!str) return ""; if (str.match(/^\d{1,2}\/\d{1,2}\/\d{4}$/)) { const [d, m, y] = str.split('/'); if (d && m && y) { const dd = d.padStart(2, '0'); const mm = m.padStart(2, '0'); return `${y}-${mm}-${dd}`; } } if (str.match(/^\d{4}-\d{1,2}-\d{1,2}$/)) { const parts = str.split('-'); parts[1] = parts[1].padStart(2,'0'); parts[2] = parts[2].padStart(2,'0'); return parts.join('-'); } return str; },
        descargarResultadosComoImagen: function() { const container = document.getElementById('pagos-table-pendientes-container'); const table = document.getElementById('pagos-tabla-pendientes'); if (!container || !table) { Swal.fire('Error', 'No se encontró la tabla para descargar.', 'error'); return; } const oldMaxHeight = container.style.maxHeight; const oldOverflow = container.style.overflowY; container.style.maxHeight = 'none'; container.style.overflowY = 'visible'; const elemsAcciones = table.querySelectorAll('.pagos-acciones-col'); elemsAcciones.forEach(el => el.style.display = "none"); showLoading("Generando imagen..."); setTimeout(() => { html2canvas(table).then(canvas => { container.style.maxHeight = oldMaxHeight; container.style.overflowY = oldOverflow; elemsAcciones.forEach(el => el.style.display = ""); hideLoading(); const dataURL = canvas.toDataURL("image/png"); const a = document.createElement("a"); a.href = dataURL; a.download = "pagos_pendientes.png"; document.body.appendChild(a); a.click(); document.body.removeChild(a); }).catch(err => { hideLoading(); Swal.fire('Error', 'No se pudo generar la imagen: ' + err.message, 'error'); }); }, 50); }
    };
