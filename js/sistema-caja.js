"use strict";
    const SistemaCaja = {
        editingRecord: null, initialized: false,
        CAJA_KEY: "cajaRecords_v2_scoped", BANCO_KEY: "bancoRecords_v2_scoped", GENERAL_KEY: "generalRecords_v2_scoped", HISTORIAL_KEY: "cajaHistorialRecords_v2_scoped",
        memoryStorage: {
            DB_NAME: 'cajaAppDB_v2_main_scoped',
            initDB: function(dbName = 'cajaAppDB_v2_main_scoped_default') { this.DB_NAME = dbName; if (typeof localforage !== 'undefined') { localforage.config({ driver: [localforage.INDEXEDDB, localforage.WEBSQL, localforage.LOCALSTORAGE], name: this.DB_NAME, storeName: 'cajaMainStore' }); } else { console.error("localForage no está definido para SistemaCaja."); } },
            async getItem(key) { return await localforage.getItem(key) || []; },
            async setItem(key, value) { await localforage.setItem(key, value); },
            async removeItem(key) { await localforage.removeItem(key); },
            async clearAllCajaData() { await localforage.removeItem(SistemaCaja.CAJA_KEY); await localforage.removeItem(SistemaCaja.BANCO_KEY); await localforage.removeItem(SistemaCaja.GENERAL_KEY); await localforage.removeItem(SistemaCaja.HISTORIAL_KEY); }
        },
        init: async function() { if (this.initialized) return; this.memoryStorage.initDB(); this.initializeFormElements(); this.configurarEventosCaja(); await this.cargarMovimientos(); this.setTodaysDate('caja-fechaReporte'); this.setTodaysDate('caja-fechaHistorial'); this.initialized = true; },
        renderView: async function() { if (!this.initialized) await this.init(); else await this.cargarMovimientos(); },
        initializeFormElements: function() { this.setTodaysDate('fechaMovimiento'); const cuentaSelect = document.getElementById('cuenta'); if (cuentaSelect) { cuentaSelect.value = 'Caja'; this.toggleBancoSelect(); } document.getElementById('desc').value = ''; document.getElementById('monto').value = ''; document.getElementById('tipo').value = 'Ingreso'; document.getElementById('banco').value = 'BCP'; this.cancelarEdicion(); },
        setTodaysDate: function(elementId) { const el = document.getElementById(elementId); if (el) { const today = new Date(); el.value = today.getFullYear() + '-' + String(today.getMonth() + 1).padStart(2, '0') + '-' + String(today.getDate()).padStart(2, '0'); } },
        formatDateForDisplay: function(dateString, fallbackTimestamp) { try { let dateToFormat; if (dateString && /^\d{4}-\d{2}-\d{2}$/.test(dateString)) { const parts = dateString.split('-'); dateToFormat = new Date(Date.UTC(parts[0], parts[1] - 1, parts[2])); } else if (fallbackTimestamp) { dateToFormat = new Date(fallbackTimestamp); } else { return 'N/A'; } const day = String(dateToFormat.getUTCDate()).padStart(2, '0'); const month = String(dateToFormat.getUTCMonth() + 1).padStart(2, '0'); const year = dateToFormat.getUTCFullYear(); return `${day}/${month}/${year}`; } catch (e) { return 'Inválida'; } },
        toggleBancoSelect: function() { const cuenta = document.getElementById("cuenta")?.value; const bancoContainer = document.getElementById("banco-container"); if (bancoContainer) bancoContainer.style.display = (cuenta === "CuentaBancaria") ? "block" : "none"; },
        cancelarEdicion: function() { this.editingRecord = null; const formTitle = document.getElementById("caja-form-title"); if(formTitle) formTitle.textContent = "Agregar Nuevo Movimiento"; const btnAgregar = document.getElementById("caja-btn-agregar"); if(btnAgregar) btnAgregar.textContent = "Agregar Movimiento"; const btnCancelar = document.getElementById("caja-btn-cancelar"); if(btnCancelar) btnCancelar.style.display = "none"; document.getElementById('desc').value = ''; document.getElementById('monto').value = ''; },
        configurarEventosCaja: function() {
            const container = document.getElementById('rendicionCajaView'); if (!container) return;
            container.querySelector('#cuenta')?.addEventListener('change', () => this.toggleBancoSelect());
            container.querySelector('#caja-btn-agregar')?.addEventListener('click', () => this.guardarMovimiento());
            container.querySelector('#caja-btn-cancelar')?.addEventListener('click', () => this.cancelarEdicion());
            container.querySelector('#verCuenta')?.addEventListener('change', () => this.cargarMovimientos());
            container.querySelector('#caja-fechaReporte')?.addEventListener('change', () => this.buscarReporte());
            container.querySelector('#caja-buscar-reporte')?.addEventListener('click', () => this.buscarReporte());
            container.querySelector('#caja-descargar-reporte')?.addEventListener('click', () => this.descargarTablaComoImagen('caja-reporte-table-container', 'reporte_diario_caja'));
            container.querySelector('#caja-fechaHistorial')?.addEventListener('change', () => this.buscarHistorial());
            container.querySelector('#caja-buscar-historial')?.addEventListener('click', () => this.buscarHistorial());
            container.querySelector('#caja-descargar-historial')?.addEventListener('click', () => this.descargarTablaComoImagen('caja-historial-table-container', 'historial_completo_caja'));
            container.querySelector('#caja-descargar-movimientos')?.addEventListener('click', () => this.descargarTablaComoImagen('tabla-movimientos-container', 'movimientos_caja'));
            container.querySelector('#caja-exportar-json')?.addEventListener('click', () => this.exportarJSON());
            container.querySelector('#caja-exportar-csv')?.addEventListener('click', () => this.exportarCSV());
            container.querySelector('#caja-importar-json')?.addEventListener('click', () => this.importarJSON());
            container.querySelector('#caja-importar-csv')?.addEventListener('click', () => this.importarCSV());
            container.querySelector('#caja-realizar-corte')?.addEventListener('click', () => this.corteCaja());
            container.querySelector('#caja-limpiar-datos')?.addEventListener('click', () => this.limpiarDatos());
            const movBody = container.querySelector('#movimientos-body'); if(movBody) { movBody.addEventListener('click', (event) => { const target = event.target.closest('button'); if(!target || !target.dataset.id) return; const id = target.dataset.id; const key = target.dataset.key; if(target.classList.contains('btn-edit')) this.editarMovimiento(id, key); else if(target.classList.contains('btn-delete')) this.borrarMovimiento(id, key); });}
        },
        guardarMovimiento: async function() { const fecha = document.getElementById("fechaMovimiento").value; const cuenta = document.getElementById("cuenta").value; const banco = document.getElementById("banco").value; const desc = document.getElementById("desc").value.trim(); const tipo = document.getElementById("tipo").value; const monto = parseFloat(document.getElementById("monto").value); if (!fecha) { Swal.fire("Error", "Seleccione una fecha.", "error"); return; } if (!desc) { Swal.fire("Error", "Ingrese una descripción.", "error"); return; } if (isNaN(monto) || monto <= 0) { Swal.fire("Error", "Ingrese un monto válido.", "error"); return; } const key = (cuenta === "Caja") ? this.CAJA_KEY : (cuenta === "CuentaBancaria") ? this.BANCO_KEY : this.GENERAL_KEY; let records = await this.memoryStorage.getItem(key) || []; if (this.editingRecord) { const index = records.findIndex(r => r.id == this.editingRecord.id); if (index !== -1) { const originalRecord = records[index]; const updatedRecord = { ...originalRecord, fecha: fecha, desc: desc, tipo: tipo, monto: monto, cuenta: cuenta, banco: (cuenta === "CuentaBancaria") ? banco : "" }; records[index] = updatedRecord; await this.memoryStorage.setItem(key, records); await this.actualizarHistorialMovimiento(updatedRecord); Swal.fire('Actualizado', "Movimiento actualizado.", "success"); } else { Swal.fire("Error", "Registro no encontrado para actualizar.", "error"); this.cancelarEdicion(); return; } } else { const nuevo = { id: Date.now(), fecha: fecha, desc, tipo, monto, cuenta, banco: (cuenta === "CuentaBancaria") ? banco : "" }; records.push(nuevo); await this.memoryStorage.setItem(key, records); await this.agregarAlHistorial(nuevo); Swal.fire("Agregado", "Movimiento agregado.", "success"); } this.initializeFormElements(); this.cargarMovimientos(); },
        cargarMovimientos: async function() { const verCuenta = document.getElementById("verCuenta")?.value; if (!verCuenta) return; const key = (verCuenta === "Caja") ? this.CAJA_KEY : (verCuenta === "CuentaBancaria") ? this.BANCO_KEY : this.GENERAL_KEY; const tbody = document.getElementById("movimientos-body"); if (!tbody) return; let records = await this.memoryStorage.getItem(key) || []; tbody.innerHTML = ""; let saldo = 0; records.sort((a, b) => { const dateA = a.fecha || new Date(a.id).toISOString().substring(0, 10); const dateB = b.fecha || new Date(b.id).toISOString().substring(0, 10); if (dateA < dateB) return -1; if (dateA > dateB) return 1; return a.id - b.id; }); records.forEach(item => { saldo += (item.tipo === "Ingreso") ? item.monto : -item.monto; const row = document.createElement("tr"); row.innerHTML = `<td>${this.formatDateForDisplay(item.fecha, item.id)}</td><td>${item.desc}</td><td>${item.tipo}</td><td style="text-align:right;">${item.monto.toFixed(2)}</td><td>${item.cuenta}</td><td>${item.banco || '-'}</td><td><button class="btn-edit" data-id="${item.id}" data-key="${key}">Editar</button><button class="btn-delete" data-id="${item.id}" data-key="${key}">Borrar</button></td>`; tbody.appendChild(row); }); document.getElementById("saldo-total").textContent = saldo.toFixed(2); },
        editarMovimiento: async function(id, key) { let records = await this.memoryStorage.getItem(key) || []; let recordToEdit = records.find(r => r.id == id); if (recordToEdit) { document.getElementById("fechaMovimiento").value = recordToEdit.fecha || new Date(recordToEdit.id).toISOString().substring(0, 10); document.getElementById("desc").value = recordToEdit.desc; document.getElementById("tipo").value = recordToEdit.tipo; document.getElementById("monto").value = recordToEdit.monto; document.getElementById("cuenta").value = recordToEdit.cuenta; this.toggleBancoSelect(); if (recordToEdit.cuenta === "CuentaBancaria") { document.getElementById("banco").value = recordToEdit.banco || 'BCP'; } this.editingRecord = { id: recordToEdit.id, key: key }; document.getElementById("caja-form-title").textContent = "Editar Movimiento"; document.getElementById("caja-btn-agregar").textContent = "Actualizar Movimiento"; document.getElementById("caja-btn-cancelar").style.display = "inline-block"; document.getElementById('caja-form-title').scrollIntoView({ behavior: 'smooth' }); } else { Swal.fire("Error", "Registro no encontrado.", "error"); } },
        borrarMovimiento: async function(id, key) { const confirmation = await Swal.fire({ title: '¿Eliminar Movimiento?', text: 'Esta acción no se puede deshacer.', icon: 'warning', showCancelButton: true, confirmButtonText: 'Sí, eliminar' }); if (!confirmation.isConfirmed) return; try { let records = await this.memoryStorage.getItem(key) || []; const initialLength = records.length; records = records.filter(item => item.id != id); if (records.length < initialLength) await this.memoryStorage.setItem(key, records); let historial = await this.memoryStorage.getItem(this.HISTORIAL_KEY) || []; const initialHistLength = historial.length; historial = historial.filter(item => item.id != id); if (historial.length < initialHistLength) await this.memoryStorage.setItem(this.HISTORIAL_KEY, historial); Swal.fire("Eliminado", "Movimiento eliminado.", "success"); this.cargarMovimientos(); } catch (error) { Swal.fire("Error", "Error al borrar movimiento: " + error.message, "error"); } },
        agregarAlHistorial: async function(mov) { try { let historial = await this.memoryStorage.getItem(this.HISTORIAL_KEY) || []; if (!historial.some(item => item.id === mov.id)) { historial.push(mov); await this.memoryStorage.setItem(this.HISTORIAL_KEY, historial); } } catch (error) { console.error("Error adding to Caja history:", error); } },
        actualizarHistorialMovimiento: async function(movActualizado) { try { let historial = await this.memoryStorage.getItem(this.HISTORIAL_KEY) || []; const index = historial.findIndex(r => r.id == movActualizado.id); if (index !== -1) { historial[index] = movActualizado; } else { historial.push(movActualizado); } await this.memoryStorage.setItem(this.HISTORIAL_KEY, historial); } catch(error) { console.error("Error updating Caja history:", error); } },
        exportarJSON: async function() { try { const data = { caja: await this.memoryStorage.getItem(this.CAJA_KEY) || [], banco: await this.memoryStorage.getItem(this.BANCO_KEY) || [], general: await this.memoryStorage.getItem(this.GENERAL_KEY) || [], historial: await this.memoryStorage.getItem(this.HISTORIAL_KEY) || [] }; const dataStr = JSON.stringify(data, null, 2); const blob = new Blob([dataStr], { type: "application/json;charset=utf-8" }); const url = URL.createObjectURL(blob); const a = document.createElement("a"); a.href = url; a.download = `caja_movimientos_backup_${new Date().toISOString().slice(0,10)}.json`; document.body.appendChild(a); a.click(); document.body.removeChild(a); URL.revokeObjectURL(url); } catch (error) { Swal.fire("Error", "Error al exportar datos de caja a JSON.", "error"); } },
        exportarCSV: async function() { try { let historialRecords = await this.memoryStorage.getItem(this.HISTORIAL_KEY) || []; historialRecords.sort((a, b) => { const dateA = a.fecha || new Date(a.id).toISOString().substring(0, 10); const dateB = b.fecha || new Date(b.id).toISOString().substring(0, 10); if (dateA < dateB) return -1; if (dateA > dateB) return 1; return a.id - b.id; }); let csv = "﻿ID,Fecha,Descripción,Tipo,Monto,Cuenta,Banco
"; const escapeCsv = (str) => { if (str === null || str === undefined) return ''; str = String(str); if (str.includes(',') || str.includes('"') || str.includes('
')) { return `"${str.replace(/"/g, '""')}"`; } return str; }; historialRecords.forEach(item => { const fechaFormato = item.fecha || new Date(item.id).toISOString().substring(0, 10); csv += `${item.id},${fechaFormato},${escapeCsv(item.desc)},${item.tipo},${item.monto.toFixed(2)},${item.cuenta},${escapeCsv(item.banco || '')}
`; }); const blob = new Blob([csv], { type: "text/csv;charset=utf-8;" }); const url = URL.createObjectURL(blob); const a = document.createElement("a"); a.href = url; a.download = `caja_movimientos_historial_${new Date().toISOString().slice(0,10)}.csv`; document.body.appendChild(a); a.click(); document.body.removeChild(a); URL.revokeObjectURL(url); } catch (error) { Swal.fire("Error", "Error al exportar datos de caja a CSV.", "error"); } },
        importarJSON: function() { const input = document.createElement("input"); input.type = "file"; input.accept = ".json"; input.onchange = async e => { const file = e.target.files[0]; if (!file) return; const reader = new FileReader(); reader.onload = async evt => { try { const data = JSON.parse(evt.target.result); if (typeof data !== 'object' || data === null || !Array.isArray(data.caja) || !Array.isArray(data.banco) || !Array.isArray(data.general) || !Array.isArray(data.historial)) { throw new Error("El archivo JSON no tiene la estructura esperada (caja, banco, general, historial arrays)."); } const confirmation = await Swal.fire({title: 'Importar Datos de Caja', text:'Esto reemplazará TODOS los datos de caja actuales. ¿Continuar?', icon: 'warning', showCancelButton:true, confirmButtonText: 'Sí, importar'}); if (!confirmation.isConfirmed) return; await this.memoryStorage.setItem(this.CAJA_KEY, data.caja || []); await this.memoryStorage.setItem(this.BANCO_KEY, data.banco || []); await this.memoryStorage.setItem(this.GENERAL_KEY, data.general || []); await this.memoryStorage.setItem(this.HISTORIAL_KEY, data.historial || []); this.cargarMovimientos(); Swal.fire("Éxito", "Datos de caja importados desde JSON.", "success"); } catch (err) { Swal.fire("Error", "Error al importar JSON de caja: " + err.message, "error"); } }; reader.readAsText(file); }; input.click(); },
        importarCSV: function() { const input = document.createElement("input"); input.type = "file"; input.accept = ".csv"; input.onchange = async e => { const file = e.target.files[0]; if (!file) return; const reader = new FileReader(); reader.onload = async evt => { try { const text = evt.target.result; const lines = text.split(/?
/); if (lines.length < 2) throw new Error("CSV vacío o sin datos."); const headers = lines[0].toLowerCase().split(','); const expectedHeaders = ['id', 'fecha', 'descripción', 'tipo', 'monto', 'cuenta', 'banco']; let recordsCaja = []; let recordsBanco = []; let recordsGeneral = []; let recordsHistorial = []; for (let i = 1; i < lines.length; i++) { const line = lines[i].trim(); if (!line) continue; const parts = line.split(","); if (parts.length >= expectedHeaders.length) { const id = parseInt(parts[0]) || (Date.now() + i); const fecha = parts[1].trim(); const desc = parts[2].trim().replace(/""/g, '"'); const tipo = parts[3].trim(); const monto = parseFloat(parts[4]) || 0; const cuenta = parts[5].trim(); const banco = parts[6].trim().replace(/""/g, '"'); if (!fecha || !desc || !tipo || isNaN(monto) || !cuenta) continue; const record = { id, fecha, desc, tipo, monto, cuenta, banco }; if (cuenta === "Caja") recordsCaja.push(record); else if (cuenta === "CuentaBancaria") recordsBanco.push(record); else if (cuenta === "General") recordsGeneral.push(record); recordsHistorial.push(record); } } const confirmation = await Swal.fire({title: 'Importar Datos de Caja (CSV)', text:'Esto reemplazará TODOS los datos de caja actuales con los del CSV. ¿Continuar?', icon: 'warning', showCancelButton:true, confirmButtonText: 'Sí, importar'}); if (!confirmation.isConfirmed) return; await this.memoryStorage.setItem(this.CAJA_KEY, recordsCaja); await this.memoryStorage.setItem(this.BANCO_KEY, recordsBanco); await this.memoryStorage.setItem(this.GENERAL_KEY, recordsGeneral); await this.memoryStorage.setItem(this.HISTORIAL_KEY, recordsHistorial); this.cargarMovimientos(); Swal.fire("Éxito", `Datos de caja importados desde CSV. ${recordsHistorial.length} registros procesados.`, "success"); } catch (err) { Swal.fire("Error", "Error al importar CSV de caja: " + err.message, "error"); } }; reader.readAsText(file); }; input.click(); },
        limpiarDatos: async function() { const result = await Swal.fire({title:'Limpiar Datos de Caja', html:'¿Borrar TODOS los registros de Caja, Banco, General e Historial de Caja?<br><b>Esta acción es irreversible.</b>', icon:'warning', showCancelButton:true, confirmButtonColor:'#d33', confirmButtonText:'Sí, limpiar todo'}); if(result.isConfirmed){ try{ await this.memoryStorage.clearAllCajaData(); this.cargarMovimientos(); document.getElementById('caja-reporte-body').innerHTML = ''; document.getElementById('caja-historial-body').innerHTML = ''; document.getElementById('caja-neto-caja').textContent = '0.00'; document.getElementById('caja-neto-bancario').textContent = '0.00'; document.getElementById('caja-neto-global').textContent = '0.00'; Swal.fire("Limpiado", "Datos de caja eliminados.", "success"); } catch(err) { Swal.fire("Error", "Error al limpiar datos de caja: " + err.message, "error");}} },
        corteCaja: async function() { try { let caja = await this.memoryStorage.getItem(this.CAJA_KEY) || []; let banco = await this.memoryStorage.getItem(this.BANCO_KEY) || []; let general = await this.memoryStorage.getItem(this.GENERAL_KEY) || []; let saldoCaja = caja.reduce((sum, item) => sum + (item.tipo === "Ingreso" ? item.monto : -item.monto), 0); let saldoBancaria = banco.reduce((sum, item) => sum + (item.tipo === "Ingreso" ? item.monto : -item.monto), 0); let saldoGeneral = general.reduce((sum, item) => sum + (item.tipo === "Ingreso" ? item.monto : -item.monto), 0); let totalActualOperativo = saldoCaja + saldoBancaria; if (caja.length === 0 && banco.length === 0 && general.length === 0) { Swal.fire("Info", "No hay movimientos registrados para realizar un corte.", "info"); return; } const { value: remStr } = await Swal.fire({ title: 'Corte de Caja', html: `Saldo actual (Caja + Banco): <b>${totalActualOperativo.toFixed(2)}</b><br>Saldo General: <b>${saldoGeneral.toFixed(2)}</b><br><br>¿Cuánto desea dejar como Saldo Inicial en 'Caja' para el siguiente periodo?`, input: 'number', inputValue: "0", inputAttributes: { min: 0, step: "0.01" }, showCancelButton: true, confirmButtonText: 'Realizar Corte', inputValidator: (value) => { if (!value || parseFloat(value) < 0) return 'Ingrese un valor numérico positivo o cero.' } }); if (remStr === undefined) return; const remanente = parseFloat(remStr); if (isNaN(remanente)) { Swal.fire("Error", "Cantidad no válida.", "error"); return; } const confirmation = await Swal.fire({title:'Confirmar Corte', html:`Se moverán todos los registros actuales (Caja, Banco, General) al historial y se creará un nuevo 'Saldo Inicial' de ${remanente.toFixed(2)} en 'Caja'. ¿Continuar?`, icon:'warning', showCancelButton:true, confirmButtonText:'Sí, continuar'}); if(!confirmation.isConfirmed) return; let historial = await this.memoryStorage.getItem(this.HISTORIAL_KEY) || []; let nuevosEnHistorial = [...caja, ...banco, ...general]; let historialActualizado = historial.concat(nuevosEnHistorial); await this.memoryStorage.setItem(this.HISTORIAL_KEY, historialActualizado); await this.memoryStorage.setItem(this.CAJA_KEY, []); await this.memoryStorage.setItem(this.BANCO_KEY, []); await this.memoryStorage.setItem(this.GENERAL_KEY, []); if (remanente > 0) { const todayStr = new Date().toISOString().substring(0, 10); let saldoInicialRecord = { id: Date.now(), fecha: todayStr, desc: "Saldo Inicial (Post-Corte)", tipo: "Ingreso", monto: remanente, cuenta: "Caja", banco: "" }; await this.memoryStorage.setItem(this.CAJA_KEY, [saldoInicialRecord]); let finalHistorial = await this.memoryStorage.getItem(this.HISTORIAL_KEY) || []; finalHistorial.push(saldoInicialRecord); await this.memoryStorage.setItem(this.HISTORIAL_KEY, finalHistorial); } else { await this.memoryStorage.setItem(this.CAJA_KEY, []); } Swal.fire("Corte Realizado", `Se movieron ${nuevosEnHistorial.length} registros al historial.<br>Saldo Inicial en Caja: ${remanente.toFixed(2)}.`, "success"); this.cargarMovimientos(); } catch (error) { Swal.fire("Error", "Ocurrió un error durante el corte de caja: " + error.message, "error"); } },
        descargarTablaComoImagen: function(containerId, filenamePrefix = 'tabla_caja') { const container = document.getElementById(containerId); if (!container) { Swal.fire('Error', 'No se encontró el contenedor de la tabla: ' + containerId, 'error'); return; } const table = container.querySelector('table'); if (!table) { Swal.fire('Error', 'No se encontró la tabla dentro del contenedor: ' + containerId, 'error'); return; } const oldMaxHeight = container.style.maxHeight; const oldOverflow = container.style.overflowY; container.style.maxHeight = "none"; container.style.overflowY = "visible"; const elemsAcciones = table.querySelectorAll('.acciones-col, .pagos-acciones-col'); elemsAcciones.forEach(el => el.style.display = "none"); showLoading("Generando imagen..."); setTimeout(() => { html2canvas(table, { scale: 2, useCORS: true, logging: false }).then(canvas => { container.style.maxHeight = oldMaxHeight; container.style.overflowY = oldOverflow; elemsAcciones.forEach(el => el.style.display = ""); hideLoading(); const dataURL = canvas.toDataURL("image/png"); const a = document.createElement("a"); a.href = dataURL; const timestamp = new Date().toISOString().slice(0, 10).replace(/-/g, ''); a.download = `${filenamePrefix}_${timestamp}.png`; document.body.appendChild(a); a.click(); document.body.removeChild(a); }).catch(err => { hideLoading(); container.style.maxHeight = oldMaxHeight; container.style.overflowY = oldOverflow; elemsAcciones.forEach(el => el.style.display = ""); Swal.fire('Error', 'No se pudo generar la imagen de la tabla: ' + err.message, 'error'); }); }, 50); },
        buscarReporte: async function() { const fecha = document.getElementById("caja-fechaReporte").value; if (!fecha) { Swal.fire("Info", "Seleccione una fecha para el reporte.", "info"); return; } try { let cajaRecords = await this.memoryStorage.getItem(this.CAJA_KEY) || []; let bancoRecords = await this.memoryStorage.getItem(this.BANCO_KEY) || []; const filterByDate = record => { const recordDate = record.fecha || new Date(record.id).toISOString().substring(0, 10); return recordDate === fecha; }; let recordsDelDia = [ ...cajaRecords.filter(filterByDate), ...bancoRecords.filter(filterByDate) ]; recordsDelDia.sort((a, b) => a.id - b.id); const tbody = document.getElementById("caja-reporte-body"); tbody.innerHTML = ""; let totalIngresosCaja = 0, totalIngresosBancario = 0, totalSalidasCaja = 0, totalSalidasBancario = 0; if (recordsDelDia.length === 0) { tbody.innerHTML = `<tr><td colspan="6" style="text-align:center; padding: 20px;">No se encontraron movimientos de Caja o Banco para el ${this.formatDateForDisplay(fecha)}.</td></tr>`; } else { recordsDelDia.forEach(record => { const fechaMostrada = this.formatDateForDisplay(record.fecha, record.id); let row = document.createElement("tr"); row.innerHTML = `<td>${fechaMostrada}</td><td>${record.desc}</td><td>${record.tipo}</td><td style="text-align:right;">${record.monto.toFixed(2)}</td><td>${record.cuenta}</td><td>${record.banco || '-'}</td>`; tbody.appendChild(row); if (record.cuenta === "Caja") { if (record.tipo === "Ingreso") totalIngresosCaja += record.monto; else totalSalidasCaja += record.monto; } else if (record.cuenta === "CuentaBancaria") { if (record.tipo === "Ingreso") totalIngresosBancario += record.monto; else totalSalidasBancario += record.monto; } }); } let netoCaja = totalIngresosCaja - totalSalidasCaja; let netoBancario = totalIngresosBancario - totalSalidasBancario; let netoGlobal = netoCaja + netoBancario; document.getElementById("caja-neto-caja").textContent = netoCaja.toFixed(2); document.getElementById("caja-neto-bancario").textContent = netoBancario.toFixed(2); document.getElementById("caja-neto-global").textContent = netoGlobal.toFixed(2); } catch (error) { Swal.fire("Error", "Ocurrió un error al buscar el reporte diario de caja: " + error.message, "error"); document.getElementById("caja-reporte-body").innerHTML = `<tr><td colspan="6" style="text-align:center; padding: 20px; color: red;">Error al cargar datos.</td></tr>`; document.getElementById("caja-neto-caja").textContent = 'Error'; document.getElementById("caja-neto-bancario").textContent = 'Error'; document.getElementById("caja-neto-global").textContent = 'Error'; } },
        buscarHistorial: async function() { const fecha = document.getElementById("caja-fechaHistorial").value; const tbody = document.getElementById("caja-historial-body"); tbody.innerHTML = ""; try { let historial = await this.memoryStorage.getItem(this.HISTORIAL_KEY) || []; let filteredHistorial = []; if (!fecha) { filteredHistorial = [...historial]; } else { const filterByDate = record => { const recordDate = record.fecha || new Date(record.id).toISOString().substring(0, 10); return recordDate === fecha; }; filteredHistorial = historial.filter(filterByDate); } filteredHistorial.sort((a, b) => { const dateA = a.fecha || new Date(a.id).toISOString().substring(0, 10); const dateB = b.fecha || new Date(b.id).toISOString().substring(0, 10); if (dateA < dateB) return -1; if (dateA > dateB) return 1; return a.id - b.id; }); if (filteredHistorial.length === 0) { const message = fecha ? `No se encontraron movimientos en el historial de caja para el ${this.formatDateForDisplay(fecha)}.` : "El historial de movimientos de caja está vacío."; tbody.innerHTML = `<tr><td colspan="6" style="text-align:center; padding: 20px;">${message}</td></tr>`; } else { filteredHistorial.forEach(item => { const fechaMostrada = this.formatDateForDisplay(item.fecha, item.id); let row = document.createElement("tr"); row.innerHTML = `<td>${fechaMostrada}</td><td>${item.desc}</td><td>${item.tipo}</td><td style="text-align:right;">${item.monto.toFixed(2)}</td><td>${item.cuenta}</td><td>${item.banco || '-'}</td>`; tbody.appendChild(row); }); } } catch (error) { Swal.fire("Error", "Ocurrió un error al buscar en el historial de caja: " + error.message, "error"); tbody.innerHTML = `<tr><td colspan="6" style="text-align:center; padding: 20px; color: red;">Error al cargar el historial.</td></tr>`; } }
    };
    ```

*   **`js/backup-manager.js`**:
    ```javascript
    "use strict";
    const BackupManager = {
        backupFolderHandle: null, backupIntervalId: null, DB_NAME_CONFIG: 'appBackupConfigDB', CONFIG_STORE_KEY: 'generalBackupConfigGlobal',
        init: async function() { if (typeof localforage !== 'undefined') { localforage.config({ name: this.DB_NAME_CONFIG, storeName: 'configStoreBackup' }); } await this.cargarConfiguracionBackup(); },
        seleccionarCarpetaBackup: async function() { if (!window.showDirectoryPicker) { Swal.fire('Navegador no Compatible', 'Tu navegador no soporta la API para seleccionar carpetas.', 'warning'); return; } try { this.backupFolderHandle = await window.showDirectoryPicker(); const permiso = await this.backupFolderHandle.queryPermission({ mode: "readwrite" }); if (permiso !== "granted") { const request = await this.backupFolderHandle.requestPermission({ mode: "readwrite" }); if (request !== 'granted') { Swal.fire('Permiso Denegado', 'Se necesita permiso para escribir en la carpeta seleccionada.', 'error'); this.backupFolderHandle = null; return; } } document.getElementById("backup-general-folder").value = this.backupFolderHandle.name; Swal.fire('Carpeta Seleccionada', `Carpeta "${this.backupFolderHandle.name}" seleccionada para backups generales.`, 'info'); this.actualizarEstadoBackup(); } catch (error) { if (error.name !== 'AbortError') { Swal.fire("Error", "Error al seleccionar carpeta: " + error.message, 'error'); } this.backupFolderHandle = null; document.getElementById("backup-general-folder").value = ""; this.actualizarEstadoBackup(); } },
        guardarConfiguracionBackup: async function() { const folderText = document.getElementById("backup-general-folder").value; const interval = document.getElementById("backup-general-interval").value; if (!this.backupFolderHandle && folderText) { Swal.fire("Carpeta Requerida", "Debes seleccionar una carpeta antes de guardar la configuración.", "warning"); return; } else if (!this.backupFolderHandle && !folderText) { await localforage.setItem(this.CONFIG_STORE_KEY, { interval }); Swal.fire("Configuración Guardada", `Intervalo de respaldo guardado (${interval} min). Selecciona una carpeta para activar el auto-backup.`, "success"); this.iniciarRespaldoAutomático(); return; } await localforage.setItem(this.CONFIG_STORE_KEY, { interval }); Swal.fire("Configuración Guardada", "Configuración de backup general guardada. El respaldo automático se iniciará/actualizará.", "success"); this.iniciarRespaldoAutomático(); },
        cargarConfiguracionBackup: async function() { const config = await localforage.getItem(this.CONFIG_STORE_KEY) || {}; document.getElementById("backup-general-interval").value = config.interval || "60"; document.getElementById("backup-general-folder").value = ""; this.backupFolderHandle = null; this.iniciarRespaldoAutomático(); },
        iniciarRespaldoAutomático: async function() { const config = await localforage.getItem(this.CONFIG_STORE_KEY) || {}; const interval = parseInt(config.interval) || 60; if (this.backupIntervalId) clearInterval(this.backupIntervalId); if (this.backupFolderHandle) { this.backupIntervalId = setInterval(() => this.generarBackupGeneral(), interval * 60000); } this.actualizarEstadoBackup(); },
        actualizarEstadoBackup: async function() { const statusEl = document.getElementById('backup-general-status'); if (!statusEl) return; const config = await localforage.getItem(this.CONFIG_STORE_KEY) || {}; const interval = parseInt(config.interval) || 60; if (this.backupFolderHandle) { statusEl.textContent = `Respaldo automático activo cada ${interval} minutos en la carpeta "${this.backupFolderHandle.name}".`; statusEl.style.color = 'var(--success-color)'; } else { statusEl.textContent = `Respaldo automático configurado cada ${interval} minutos. Selecciona una carpeta para habilitarlo en esta sesión.`; statusEl.style.color = 'var(--warning-color)'; } },
        generarBackupGeneral: async function(manual = false) { if (!this.backupFolderHandle && !manual) { this.actualizarEstadoBackup(); return; } if (!this.backupFolderHandle && manual) { Swal.fire("Carpeta Requerida", "Por favor, selecciona una carpeta de destino para el backup manual.", "warning"); return; } showLoading("Generando backup general..."); try { const timestamp = new Date().toISOString().replace(/[:.]/g, "-"); const fileName = `backup_sistema_completo_${timestamp}.json`; const repuestosData = { productos: sistema.productos, series: sistema.series, categorias: sistema.categorias, marcas: sistema.marcas, juegos: sistema.juegos }; const pagosData = { pendientes: await SistemaPagos.memoryStorage.getPendientes(), historial: await SistemaPagos.memoryStorage.getHistorial() }; const cajaData = { caja: await SistemaCaja.memoryStorage.getItem(SistemaCaja.CAJA_KEY), banco: await SistemaCaja.memoryStorage.getItem(SistemaCaja.BANCO_KEY), general: await SistemaCaja.memoryStorage.getItem(SistemaCaja.GENERAL_KEY), historial: await SistemaCaja.memoryStorage.getItem(SistemaCaja.HISTORIAL_KEY) }; const contenidoCompleto = { version: "12.14", timestamp: new Date().toISOString(), repuestos: repuestosData, pagos: pagosData, caja: cajaData }; const contenidoStr = JSON.stringify(contenidoCompleto, null, 2); if (manual) { const dataUri = 'data:application/json;charset=utf-8,' + encodeURIComponent(contenidoStr); const a = document.createElement('a'); a.href = dataUri; a.download = fileName; a.click(); Swal.fire('Exportación Manual Exitosa', `Backup general "${fileName}" descargado.`, 'success'); } else if (this.backupFolderHandle) { const fileHandle = await this.backupFolderHandle.getFileHandle(fileName, { create: true }); const writable = await fileHandle.createWritable(); await writable.write(contenidoStr); await writable.close(); const statusEl = document.getElementById('backup-general-status'); if (statusEl) statusEl.textContent = `Último backup: ${new Date().toLocaleTimeString()} (${fileName}) en "${this.backupFolderHandle.name}"`; } } catch (error) { Swal.fire("Error de Backup General", "Error al generar/guardar el backup: " + error.message, "error"); const statusEl = document.getElementById('backup-general-status'); if (statusEl && !manual) statusEl.textContent = `Error en último backup: ${error.message}`; } finally { hideLoading(); } },
        exportarBackupGeneral: function() { this.generarBackupGeneral(true); },
        importarBackupGeneral: async function(event) {
            const file = event.target.files[0]; if (!file) return;
            showLoading("Importando backup general...");
            const reader = new FileReader();
            reader.onload = async (e) => {
                try {
                    const data = JSON.parse(e.target.result);
                    if (!data.repuestos || !data.pagos || !data.caja || !data.version) { throw new Error("El archivo de backup no tiene el formato esperado."); }
                    const confirmResult = await Swal.fire({ title: 'Confirmar Importación General', html: `Se importarán datos desde un backup v${data.version}.<br><b>¡Esto REEMPLAZARÁ TODOS los datos existentes de Repuestos, Pagos y Caja!</b>`, icon: 'warning', showCancelButton: true, confirmButtonColor: '#d33', cancelButtonColor: '#6c757d', confirmButtonText: 'Sí, importar y reemplazar', cancelButtonText: 'Cancelar' });
                    if (!confirmResult.isConfirmed) { event.target.value = null; hideLoading(); return; }

                    sistema.productos = (data.repuestos.productos || []).map(p => new Producto(p.id, p.codigo, p.nombre, p.marcaId, p.descripcion, p.categoria, p.medida, p.precio, p.costo, p.fob, p.stock, p.seriesId, p.imagenes, p.precioMayor, p.aplicaciones));
                    sistema.series = (data.repuestos.series || []).map(s => new Serie(s.id, s.codigo, s.nombre, s.color));
                    sistema.categorias = (data.repuestos.categorias || []).map(c => new Categoria(c.id, c.nombre));
                    sistema.marcas = (data.repuestos.marcas || []).map(m => new Marca(m.id, m.nombre));
                    sistema.juegos = (data.repuestos.juegos || []).map(j => new JuegoProducto(j.id, j.codigo, j.nombre, j.aplicaciones, j.componentes));
                    sistema.recalculateNextIds();
                    sistema.saveToLocalStorage();
                    if (menu.currentSectionId.startsWith('menu') || ['productosView', 'priceTableView', 'juegosView', 'seriesTableView', 'categoriesTableView', 'marcasView'].includes(menu.currentSectionId)) { sistema.renderAll(); }

                    await SistemaPagos.memoryStorage.setPendientes(data.pagos.pendientes || []);
                    await SistemaPagos.memoryStorage.setHistorial(data.pagos.historial || []);
                    if (menu.currentSectionId === 'pagosPendientesView') { await SistemaPagos.renderView(); }

                    await SistemaCaja.memoryStorage.setItem(SistemaCaja.CAJA_KEY, data.caja.caja || []);
                    await SistemaCaja.memoryStorage.setItem(SistemaCaja.BANCO_KEY, data.caja.banco || []);
                    await SistemaCaja.memoryStorage.setItem(SistemaCaja.GENERAL_KEY, data.caja.general || []);
                    await SistemaCaja.memoryStorage.setItem(SistemaCaja.HISTORIAL_KEY, data.caja.historial || []);
                    if (menu.currentSectionId === 'rendicionCajaView') { await SistemaCaja.renderView(); }

                    Swal.fire('Importación Completa', 'Todos los datos del sistema han sido restaurados desde el backup.', 'success');
                } catch (err) { Swal.fire('Error de Importación', 'No se pudo procesar el archivo de backup general: ' + err.message, 'error'); console.error("Error importando backup general:", err);
                } finally { event.target.value = null; hideLoading(); }
            };
            reader.readAsText(file);
        },
        clearAllData: async function() {
            const result = await Swal.fire({ title: '¿Borrar TODOS los datos del sistema?', html: "Esta acción eliminará <b>TODOS</b> los datos de <b>Repuestos, Pagos Pendientes y Rendición de Caja</b>.<br>¡No se puede deshacer!", icon: 'warning', showCancelButton: true, confirmButtonColor: '#d33', confirmButtonText: 'Sí, borrar todo', cancelButtonText: 'Cancelar'});
            if (result.isConfirmed) {
                localStorage.clear();
                if (typeof localforage !== 'undefined') {
                    try {
                        await localforage.clear();
                    } catch(err) { console.error("Error limpiando localForage general:", err); }
                }
                await Swal.fire('Datos Borrados', 'Toda la información del sistema ha sido eliminada. Recargando...', 'success');
                window.location.reload();
            }
        }
    };
    ```

*   **`js/menu-handler.js`**:
    ```javascript
    "use strict";
    class MenuHandler{
         constructor(){
             this.activeSubmenuId=null; this.currentSectionId='productosView';
             this.m = { 'menuProductos':'productosView', 'menuTablaPrecios':'priceTableView', 'menuJuegos':'juegosView', 'menuPagosPendientes': 'pagosPendientesView', 'menuRendicionCaja': 'rendicionCajaView', 'menuBackupGeneral': 'backupGeneralView', 'menuSeriesTable':'seriesTableView', 'menuCategoriesTable':'categoriesTableView', 'menuMarcasTable':'marcasView' };
             this.renderFunctions = { 'productosView': () => sistema.renderProductGridAndTable(), 'priceTableView': () => { const i=document.getElementById('priceTableSearchInput'); if(i&&i.value){i.value='';sistema.filterPriceTable('');} else {sistema.renderPriceTableOnly();} setTimeout(()=>i?.focus(),50); }, 'juegosView': () => sistema.renderJuegosTable(), 'pagosPendientesView': () => SistemaPagos.renderView(), 'rendicionCajaView': () => SistemaCaja.renderView(), 'backupGeneralView': () => { BackupManager.actualizarEstadoBackup(); }, 'seriesTableView': () => sistema.renderSeriesTable(), 'categoriesTableView': () => sistema.renderCategoryTable(), 'marcasView': () => sistema.renderMarcasTable() };
             this.initializeMenuEvents();
        }
         initializeMenuEvents(){ Object.entries(this.m).forEach(([menuId,sectionId])=>{ const target = document.getElementById(menuId); if(target) target.addEventListener('click',e=>{ e.preventDefault(); this.showSection(sectionId); }); }); document.querySelectorAll('.sidebar .menu-item > span').forEach(s=>{const u=s.nextElementSibling;if(u&&u.classList.contains('submenu')){s.removeAttribute('onclick');s.addEventListener('click',()=>this.toggleMenu(u.id));}}); }
         markActiveItem(menuId){ document.querySelectorAll('.sidebar .submenu-item, .sidebar .top-level-link').forEach(i=>i.classList.remove('active')); const activeLink = document.getElementById(menuId); if(activeLink){ activeLink.classList.add('active'); const parentSubmenu = activeLink.closest('.submenu'); if(parentSubmenu && !parentSubmenu.classList.contains('active')) { this.openSubmenu(parentSubmenu.id); } else if (activeLink.classList.contains('top-level-link') && this.activeSubmenuId) { this.closeSubmenu(this.activeSubmenuId); } } }
         toggleMenu(sId){const s=document.getElementById(sId);if(!s)return;const t=s.previousElementSibling,i=t?.querySelector('.toggle-icon');const a=s.classList.contains('active');if(!a&&this.activeSubmenuId&&this.activeSubmenuId!==sId)this.closeSubmenu(this.activeSubmenuId);s.classList.toggle('active');i?.classList.toggle('rotated',s.classList.contains('active'));this.activeSubmenuId=s.classList.contains('active')?sId:null;}
         openSubmenu(sId){const s=document.getElementById(sId);if(!s||s.classList.contains('active'))return;const t=s.previousElementSibling,i=t?.querySelector('.toggle-icon');if(this.activeSubmenuId&&this.activeSubmenuId!==sId)this.closeSubmenu(this.activeSubmenuId);s.classList.add('active');i?.classList.add('rotated');this.activeSubmenuId=sId;}
         closeSubmenu(sId){const s=document.getElementById(sId);if(!s)return;const t=s.previousElementSibling,i=t?.querySelector('.toggle-icon');s.classList.remove('active');i?.classList.remove('rotated');if(this.activeSubmenuId===sId)this.activeSubmenuId=null;}
         showSection(sId){ let found = false; document.querySelectorAll('.main-content > .content-wrapper').forEach(w=>{ if(w.id===sId){w.style.display='block'; w.classList.add('active'); found=true;} else{w.style.display='none'; w.classList.remove('active');} }); if(found){ this.currentSectionId=sId; this.markActiveItemBySectionId(sId); if (sId === 'pagosPendientesView' && !SistemaPagos.initialized) { SistemaPagos.init().then(() => { if (this.renderFunctions[sId]) requestAnimationFrame(this.renderFunctions[sId]); }); } else if (sId === 'rendicionCajaView' && !SistemaCaja.initialized) { SistemaCaja.init().then(() => { if (this.renderFunctions[sId]) requestAnimationFrame(this.renderFunctions[sId]); }); } else if (this.renderFunctions[sId]) { requestAnimationFrame(this.renderFunctions[sId]); } else { console.warn(`No render function defined for section: ${sId}`); } }else{ console.error(`Sección "${sId}" no encontrada.`); this.showSection('productosView'); } }
         markActiveItemBySectionId(sId){ const menuId = Object.keys(this.m).find(key => this.m[key] === sId); if(menuId) this.markActiveItem(menuId); }
    }
    ```

*   **`js/main.js`**:
    ```javascript
    "use strict";
    let sistema;
    let menu;
    document.addEventListener('DOMContentLoaded', async ()=>{
        try{
            sistema = new SistemaRepuestos();
            menu = new MenuHandler();
            await BackupManager.init();

            const initialMenuId = menu.m[menu.currentSectionId];
             if (initialMenuId) {
                 const activeMenuItem = document.getElementById(initialMenuId);
                 const parentSubmenu = activeMenuItem?.closest('.submenu');
                 if (parentSubmenu && !parentSubmenu.classList.contains('active')) {
                     menu.openSubmenu(parentSubmenu.id);
                 }
             } else {
                menu.openSubmenu('productosSubmenu');
             }
            menu.showSection(menu.currentSectionId);
            document.getElementById('searchInput')?.focus();
        } catch(error) {
            console.error("ERROR FATAL INICIALIZACIÓN:", error);
            hideLoading();
            document.body.innerHTML = `<div style='padding:20px; background:#f8d7da; color:#721c24; border:1px solid #f5c6cb; border-radius:5px; margin:20px;'><h1>Error Crítico</h1><p>No se pudo iniciar la aplicación.</p><p><strong>Mensaje:</strong> ${error.message}</p><pre style="white-space:pre-wrap; word-wrap:break-word; background:#f1f1f1; padding:10px; border-radius:3px; margin-top:10px;">${error.stack || 'No stack available.'}</pre><p style="margin-top:15px;">Intente borrar los datos locales del navegador y recargar la página. <strong>¡Esto eliminará toda la información guardada!</strong></p><button onclick="localStorage.clear(); if(typeof localforage !== 'undefined') localforage.clear().catch(e => console.error('Error clearing LF on critical error:', e)); window.location.reload();" style="padding:8px 15px; background:#dc3545; color:white; border:none; border-radius:4px; cursor:pointer;">Borrar Datos y Recargar</button></div>`;
        }
    });
    ```

**2. Update `index.html` to Include New Scripts:**

Modify `index.html`. Remove any existing script tags that might be referencing these local files (e.g., if the worker previously added empty `js/utils.js`, etc., from the incorrect `index.html`).
Then, add the following script tags just before the closing `</body>` tag, and **after** the existing CDN script tags for libraries like jQuery, SweetAlert2, etc.:

```html
    <script src="js/utils.js"></script>
    <script src="js/sistema-repuestos.js"></script>
    <script src="js/sistema-pagos.js"></script>
    <script src="js/sistema-caja.js"></script>
    <script src="js/backup-manager.js"></script>
    <script src="js/menu-handler.js"></script>
    <script src="js/main.js"></script>
</body>
</html>
```

Confirm that all JavaScript files are created with the correct content and that `index.html` is updated with the new script tags in the specified order.
